h1. Разбираемся с простыми формами

Самый простой хелпер форм -- это +form_tag+.

<erb>
<%= form_tag do %>
  Содержимое формы
<% end %>
</erb>

При подобном вызове без аргументов, он создает тег +&lt;form&gt;+, который, при отправке, сформирует POST-запрос к текущей странице. Например, предположим текущая страница +/home/index+, тогда сгенерированный HTML будет выглядеть так (некоторые переводы строк добавлены для читаемости):

<html>
<form accept-charset="UTF-8" action="/home/index" method="post">
  <div style="margin:0;padding:0">
    <input name="utf8" type="hidden" value="&#x2713;" />
    <input name="authenticity_token" type="hidden" value="f755bb0ed134b76c432144748a6d4b7a7ddf2b71" />
  </div>
  Form contents
</form>
</html>

Можно увидеть, что HTML содержит нечто дополнительное: элемент +div+ с двумя скрытыми input внутри. Этот div важен, поскольку без него форма не может быть успешно отправлена. Первый элемент input с именем +utf8+ обеспечивает, чтобы браузер правильно относился к кодировке вашей формы, он генерируется для всех форм, у которых action равен "GET" или "POST". Второй элемент input с именем +authenticity_token+ является  особенностью безопасности Rails, называемой *защитой от подделки межсайтовых запросов*, и хелперы форм генерируют его для каждой формы, у которых action не "GET" (если эта особенность безопасности включена). Подробнее об этом можно прочитать в "Руководстве Ruby On Rails по безопасности":/ruby-on-rails-security-guide/cross-site-request-forgery-csrf.

NOTE: На всем протяжении этого руководства, +div+ со скрытыми элементами input будет исключаться для краткости.

h4. Характерная форма поиска

Одной из наиболее простых форм, встречающихся в вебе, является форма поиска. Эта форма содержит:

# элемент формы с методом "GET",
# метку для поля ввода,
# элемент поля ввода текста и
# элемент отправки.

Чтобы создать эту форму, используем, соответственно, +form_tag+, +label_tag+, +text_field_tag+ и +submit_tag+. Как здесь:

<erb>
<%= form_tag("/search", :method => "get") do %>
  <%= label_tag(:q, "Search for:") %>
  <%= text_field_tag(:q) %>
  <%= submit_tag("Search") %>
<% end %>
</erb>

Это создаст следующий HTML:

<html>
<form accept-charset="UTF-8" action="/search" method="get">
  <label for="q">Search for:</label>
  <input id="q" name="q" type="text" />
  <input name="commit" type="submit" value="Search" />
</form>
</html>

TIP: Для каждого поля формы генерируется атрибут ID из его имени ("q" в примере). Эти ID могут быть очень полезны для стилей CSS или управления полями форм с помощью JavaScript.

Кроме +text_field_tag+ и +submit_tag+ имеется похожий хелпер для _каждого_ элемента управления формой в HTML.

IMPORTANT: Всегда используйте "GET" как метод для форм поиска. Это позволит пользователям сохранить в закладки определенный поиск и потом вернуться к нему. В более общем плане Rails призывает вас использовать правильный метод HTTP для экшна.

h4. Несколько хэшей в вызовах хелпера формы

Хелпер +form_tag+ принимает 2 аргумента: путь для экшна и хэш опций. Этот хэш определяет метод отправки формы и опции HTML, такие как класс элемента form.

Как в случае с хелпером +link_to+, аргумент пути не должен быть строкой. Это может быть хэш параметров URL, распознаваемый механизмом маршрутизации Rails, преобразующим хэш в валидный URL. Однако, если оба аргумента для +form_tag+ хэши, можно легко получить проблему, если захотите определить оба. Например, вы напишите так:

<ruby>
form_tag(:controller => "people", :action => "search", :method => "get", :class => "nifty_form")
# => '<form accept-charset="UTF-8" action="/people/search?method=get&class=nifty_form" method="post">'
</ruby>

Здесь методы +method+ и +class+ присоединены к строке запроса сгенерированного URL, поскольку, хотя вы и хотели передать два хэша, фактически вы передали один. Чтобы сообщить об этом Ruby, следует выделить первый хэш (или оба хэша) фигурными скобками. Это создаст HTML, который вы ожидаете:

<ruby>
form_tag({:controller => "people", :action => "search"}, :method => "get", :class => "nifty_form")
# => '<form accept-charset="UTF-8" action="/people/search" method="get" class="nifty_form">'
</ruby>

h4. Хелперы для создания элементов форм

Rails предоставляет ряд хелперов для генерации элементов форм, таких как чекбоксы, текстовые поля, радио-кнопки и так далее. Эти простые хелперы с именами, оканчивающимися на "_tag" (такие как +text_field_tag+ и +check_box_tag+), генерируют отдельный элемент +&lt;input&gt;+. Первый параметр у них это всегда имя поля. Когда форма отправлена, имя будет передано среди данных формы, и, в свою очередь, помещено в хэш +params+ со значением, введенным пользователем в это поле. Например, если форма содержит +&lt;%= text_field_tag(:query) %&gt;+, то значение для этого поля можно получить в контроллере с помощью +params[:query]+.

При именовании полей Rails использует определенные соглашения, делающие возможным отправлять параметры с нескалярными величинами, такие как массивы и хэши, которые также будут доступны в <tt>params</tt>. Об этом можно прочесть в "разделе про именование параметров":/rails-form-helpers/understanding-parameter-naming-conventions. Для подробностей по точному использованию этих хелперов, обратитесь к "документации по API":http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html.

h5. Чекбоксы

Чекбоксы -- это элементы управления формой, которые дают пользователю ряд опций, которые он может включить или выключить:

<erb>
<%= check_box_tag(:pet_dog) %>
<%= label_tag(:pet_dog, "I own a dog") %>
<%= check_box_tag(:pet_cat) %>
<%= label_tag(:pet_cat, "I own a cat") %>
</erb>

Это создаст следующее:

<html>
<input id="pet_dog" name="pet_dog" type="checkbox" value="1" />
<label for="pet_dog">I own a dog</label>
<input id="pet_cat" name="pet_cat" type="checkbox" value="1" />
<label for="pet_cat">I own a cat</label>
</html>

Первый параметр у +check_box_tag+, разумеется, -- это имя поля. Второй параметр, естественно, -- это значение поля. Это значение будет включено в данные формы (и будет присутствовать в +params+), когда чекбокс нажат.

h5. Радио-кнопки

Радио-кнопки, чем-то похожие на чекбоксы, -- это элементы управления, которые определяют набор взаимоисключающих опций (т.е. пользователь может выбрать только одну):

<erb>
<%= radio_button_tag(:age, "child") %>
<%= label_tag(:age_child, "I am younger than 21") %>
<%= radio_button_tag(:age, "adult") %>
<%= label_tag(:age_adult, "I'm over 21") %>
</erb>

Результат:

<html>
<input id="age_child" name="age" type="radio" value="child" />
<label for="age_child">I am younger than 21</label>
<input id="age_adult" name="age" type="radio" value="adult" />
<label for="age_adult">I'm over 21</label>
</html>

Как и у +check_box_tag+, второй параметр для +radio_button_tag+ это значение поля. Так как эти две радио-кнопки имеют одинаковое имя (age), пользователь может выбрать одну, и +params[:age]+ будет содержать или "child" или "adult".

NOTE: Всегда используйте метки (labels) для чекбоксов и радио-кнопок. Они связывают текст с определенной опцией и упрощают ввод, предоставляя большее пространство для щелчка.

h4. Другие интересные хелперы

Среди других элементов управления формой стоит упомянуть текстовое поле, поле пароля, скрытое поле, поля поиска, ввода телефона, даты, времени, цвета, даты-времени, локальных даты-времени, месяца, недели, url и email:

<erb>
<%= text_area_tag(:message, "Hi, nice site", :size => "24x6") %>
<%= password_field_tag(:password) %>
<%= hidden_field_tag(:parent_id, "5") %>
<%= search_field(:user, :name) %>
<%= telephone_field(:user, :phone) %>
<%= date_field(:user, :born_on) %>
<%= datetime_field(:user, :meeting_time) %>
<%= datetime_local_field(:user, :graduation_day) %>
<%= month_field(:user, :birthday_month) %>
<%= week_field(:user, :birthday_week) %>
<%= url_field(:user, :homepage) %>
<%= email_field(:user, :address) %>
<%= color_field(:user, :favorite_color) %>
<%= time_field(:task, :started_at) %>
</erb>

результат:

<html>
<textarea id="message" name="message" cols="24" rows="6">Hi, nice site</textarea>
<input id="password" name="password" type="password" />
<input id="parent_id" name="parent_id" type="hidden" value="5" />
<input id="user_name" name="user[name]" type="search" />
<input id="user_phone" name="user[phone]" type="tel" />
<input id="user_born_on" name="user[born_on]" type="date" />
<input id="user_meeting_time" name="user[meeting_time]" type="datetime" />
<input id="user_graduation_day" name="user[graduation_day]" type="datetime-local" />
<input id="user_birthday_month" name="user[birthday_month]" type="month" />
<input id="user_birthday_week" name="user[birthday_week]" type="week" />
<input id="user_homepage" name="user[homepage]" type="url" />
<input id="user_address" name="user[address]" type="email" />
<input id="user_favorite_color" name="user[favorite_color]" type="color" value="#000000" />
<input id="task_started_at" name="task[started_at]" type="time" />
</html>

Скрытые поля не отображаются пользователю, вместо этого они содержат данные, как и любое текстовое поле. Их значения могут быть изменены с помощью JavaScript.

IMPORTANT: Поля поиска, ввода телефона, даты, времени, цвета, даты-времени, локальных даты-времени, месяца, недели, url и email -- это элементы управления HTML5. Если необходимо, чтобы у вашего приложения была совместимость со старыми браузерами, вам необходим HTML5 polyfill (предоставляемый с помощью CSS и/или JavaScript). Хотя в таких решениях "нет недостатка":https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills, популярными инструментами на сегодняшний момент являются "Modernizr":http://www.modernizr.com/ и "yepnope":http://yepnopejs.com/, предоставляющие простой способ добавить функциональность, основанную на присутствии обнаруженных особенностей HTML5.

TIP: Если используются поля для ввода пароля (для любых целей), вы можете настроить свое приложение для предотвращения появления их значений в логах приложения. Это можно изучить в "Руководстве Ruby On Rails по безопасности":/ruby-on-rails-security-guide.
