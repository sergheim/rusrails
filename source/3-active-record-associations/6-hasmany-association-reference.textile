h1. Подробная информация по связи has_many

Связь +has_many+ создает отношение один-ко-многим с другой моделью. В терминах базы данных эта связь говорит, что другой класс будет иметь внешний ключ, относящийся к экземплярам этого класса.

h4. Добавляемые методы

Когда объявляете связь +has_many+, объявляющий класс автоматически получает 14 методов, относящихся к связи:
* <tt><em>collection</em>(force_reload = false)</tt>
* <tt><em>collection</em><<(object, ...)</tt>
* <tt><em>collection</em>.delete(object, ...)</tt>
* <tt><em>collection</em>=objects</tt>
* <tt><em>collection_singular</em>_ids</tt>
* <tt><em>collection_singular</em>_ids=ids</tt>
* <tt><em>collection</em>.clear</tt>
* <tt><em>collection</em>.empty?</tt>
* <tt><em>collection</em>.size</tt>
* <tt><em>collection</em>.find(...)</tt>
* <tt><em>collection</em>.where(...)</tt>
* <tt><em>collection</em>.exists?(...)</tt>
* <tt><em>collection</em>.build(attributes = {}, ...)</tt>
* <tt><em>collection</em>.create(attributes = {})</tt>

Во всех этих методах <tt><em>collection</em></tt> заменяется символом, переданным как первый аргумент в +has_many+, и <tt><em>collection_singular</em></tt> заменяется версией в единственном числе этого символа.. Например, имеем объявление:

<ruby>
class Customer < ActiveRecord::Base
  has_many :orders
end
</ruby>

Каждый экземпляр модели customer будет иметь эти методы:

<ruby>
orders(force_reload = false)
orders<<(object, ...)
orders.delete(object, ...)
orders=objects
order_ids
order_ids=ids
orders.clear
orders.empty?
orders.size
orders.find(...)
orders.where(...)
orders.exists?(...)
orders.build(attributes = {}, ...)
orders.create(attributes = {})
</ruby>

h5(#has_many-collection). <tt><em>collection</em>(force_reload = false)</tt>

Метод <tt><em>collection</em></tt> возвращает массив всех связанных объектов. Если нет связанных объектов, он возвращает пустой массив.

<ruby>
@orders = @customer.orders
</ruby>

h5(#has_many-collection-lt_lt). <tt><em>collection</em><<(object, ...)</tt>

Метод <tt><em>collection</em><<</tt> добавляет один или более объектов в коллекцию, устанавливая их внешние ключи равными первичному ключу вызывающей модели.

<ruby>
@customer.orders << @order1
</ruby>

h5(#has_many-collection-delete). <tt><em>collection</em>.delete(object, ...)</tt>

Метод <tt><em>collection</em>.delete</tt> убирает один или более объектов из коллекции, установив их внешние ключи в +NULL+.

<ruby>
@customer.orders.delete(@order1)
</ruby>

WARNING: Объекты будут в дополнение уничтожены, если связаны с +:dependent => :destroy+, и удалены, если они связаны с +:dependent => :delete_all+.

h5(#has_many-collection-equal). <tt><em>collection</em>=objects</tt>

Метод <tt><em>collection</em>=</tt> делает коллекцию содержащей только представленные объекты, добавляя и удаляя по мере необходимости.

h5(#has_many-collection_singular). <tt><em>collection_singular</em>_ids</tt>

Метод <tt><em>collection_singular</em>_ids</tt> возвращает массив id объектов в коллекции.

<ruby>
@order_ids = @customer.order_ids
</ruby>

h5(#has_many-collection_singular_ids_ids). <tt><em>collection_singular</em>_ids=ids</tt>

Метод <tt><em>collection_singular</em>_ids=</tt> делает коллекцию содержащей только объекты, идентифицированные представленными значениями первичного ключа, добавляя и удаляя по мере необходимости.

h5(#has_many-collection-clear). <tt><em>collection</em>.clear</tt>

Метод <tt><em>collection</em>.clear</tt> убирает каждый объект из коллекции. Это уничтожает связанные объекты, если они связаны с +:dependent => :destroy+, удаляет их непосредственно из базы данных, если +:dependent => :delete_all+, и в противном случае устанавливает их внешние ключи в +NULL+.

h5(#has_many-collection-empty). <tt><em>collection</em>.empty?</tt>

Метод <tt><em>collection</em>.empty?</tt> возвращает +true+, если коллекция не содержит каких-либо связанных объектов.

<ruby>
<% if @customer.orders.empty? %>
  No Orders Found
<% end %>
</ruby>

h5(#has_many-collection-size). <tt><em>collection</em>.size</tt>

Метод <tt><em>collection</em>.size</tt> возвращает количество объектов в коллекции.

<ruby>
@order_count = @customer.orders.size
</ruby>

h5(#has_many-collection-find). <tt><em>collection</em>.find(...)</tt>

Метод <tt><em>collection</em>.find</tt> ищет объекты в коллекции. Он использует тот же синтаксис и опции, что и +ActiveRecord::Base.find+.

<ruby>
@open_orders = @customer.orders.find(1)
</ruby>

h5(#has_many-collection-where). <tt><em>collection</em>.where(...)</tt>

Метод <tt><em>collection</em>.where</tt> ищет объекты в коллекции, основываясь на переданных условиях, но объекты загружаются лениво, что означает, что база данных запрашивается только когда происходит доступ к объекту(-там).

<ruby>
@open_orders = @customer.orders.where(:open => true) # Пока нет запроса
@open_order = @open_orders.first # Теперь база данных будет запрошена
</ruby>

h5(#has_many-collection-exists). <tt><em>collection</em>.exists?(...)</tt>

Метод <tt><em>collection</em>.exists?</tt> проверяет, существует ли в коллекции объект, отвечающий представленным условиям. Он использует тот же синтаксис и опции, что и +ActiveRecord::Base.exists?+.

h5(#has_many-collection-build). <tt><em>collection</em>.build(attributes = {}, ...)</tt>

Метод <tt><em>collection</em>.build</tt> возвращает один или более объектов связанного типа. Эти объекты будут экземплярами с переданными атрибутами, будет создана ссылка через их внешние ключи, но связанные объекты _не_ будут пока сохранены.

<ruby>
@order = @customer.orders.build(:order_date => Time.now,
  :order_number => "A12345")
</ruby>

h5(#has_many-collection-create). <tt><em>collection</em>.create(attributes = {})</tt>

Метод <tt><em>collection</em>.create</tt> возвращает новый объект связанного типа. Этот объект будет экземпляром с переданными атрибутами, будет создана ссылка через его внешний ключ, и, если он пройдет валидации, определенные в связанной модели, связанный объект _будет_ сохранен

<ruby>
@order = @customer.orders.create(:order_date => Time.now,
  :order_number => "A12345")
</ruby>

h4. Опции для +has_many+

Хотя Rails использует разумные значения по умолчанию, работающие во многих ситуациях, бывают случаи, когда хочется изменить поведение связи +has_many+. Такая настройка легко выполнима с помощью передачи опций при создании связи. Например, эта связь использует две такие опции:

<ruby>
class Customer < ActiveRecord::Base
  has_many :orders, :dependent => :delete_all, :validate => :false
end
</ruby>

Связь +has_many+ поддерживает эти опции:

* +:as+
* +:autosave+
* +:class_name+
* +:dependent+
* +:foreign_key+
* +:inverse_of+
* +:primary_key+
* +:source+
* +:source_type+
* +:through+
* +:validate+

h5(#has_many-as). +:as+

Установка опции +:as+ показывает, что это полиморфная связь. Полиморфные связи подробно рассматривались "ранее":/active-record-associations/the-types-of-associations-2#polymorphic-associations.

h5(#has_many-autosave). +:autosave+

Если установить опцию +:autosave+ в +true+, Rails сохранит любые загруженные члены и уничтожит члены, помеченные для уничтожения, всякий раз, когда вы сохраняете родительский объект.

h5(#has_many-class_name). +:class_name+

Если имя другой модели не может быть произведено из имени связи, можете использовать опцию +:class_name+ для предоставления имени модели. Например, если покупатель имеет много заказов, но фактическое имя модели, содержащей заказы это +Transaction+, можете установить это следующим образом:

<ruby>
class Customer < ActiveRecord::Base
  has_many :orders, :class_name => "Transaction"
end
</ruby>

h5(#has_one-dependent). +:dependent+

Управляет тем, что произойдет со связанными объектами, когда его владелец будет уничтожен:

* +:destroy+ приведет к тому, что связанные объекты также будут уничтожены
* +:delete+ приведет к тому, что связанные объекты будут удалены из базы данных напрямую (таким образом не будут выполнены колбэки)
* +:nullify+ приведет к тому, что внешние ключи будет установлен +NULL+. Колбэки не запускаются.
* +:restrict_with_exception+ приведет к вызову исключения, если есть какой-нибудь связанный объект
* +:restrict_with_error+ приведет к ошибке, добавляемой к владельцу, если есть какой-нибудь связанный объект

NOTE: Эта опция игнорируется при использовании на связи опции +:through+.

h5(#has_many-foreign_key). +:foreign_key+

По соглашению Rails предполагает, что столбец, используемый для хранения внешнего ключа в этой модели, имеет имя модели с добавленным суффиксом +_id+. Опция +:foreign_key+ позволяет установить имя внешнего ключа явно:

<ruby>
class Customer < ActiveRecord::Base
  has_many :orders, :foreign_key => "cust_id"
end
</ruby>

TIP: В любом случае, Rails не создаст столбцы внешнего ключа за вас. Вам необходимо явно определить их в своих миграциях.

h6(#has_one-inverse_of). +:inverse_of+

Опция +:inverse_of+ определяет имя связи +belongs_to+, являющейся обратной для этой связи. Не работает в комбинации с опциями +:through+ или +:as+.

<ruby>
class Supplier < ActiveRecord::Base
  has_one :account, :inverse_of => :supplier
end

class Account < ActiveRecord::Base
  belongs_to :supplier, :inverse_of => :account
end
</ruby>

h5(#has_many-primary_key). +:primary_key+

По соглашению, Rails предполагает, что столбец, используемый для хранения первичного ключа, это +id+. Вы можете переопределить это и явно определить первичный ключ с помощью опции +:primary_key+.

h5(#has_many-source). +:source+

Опция +:source+ oпределяет имя источника связи для связи +has_many :through+. Эту опцию нужно использовать, только если имя источника связи не может быть автоматически выведено из имени связи.

h5(#has_many-source_type). +:source_type+

Опция +:source_type+ определяет тип источника связи для связи +has_many :through+, который действует при полиморфной связи.

h5(#has_many-through). +:through+

Опция +:through+ определяет соединительную модель, через которую выполняется запрос. Связи +has_many :through+ предоставляют способ осуществления отношений многие-ко-многим, как обсуждалось "ранее в этом руководстве":/active-record-associations/the-types-of-associations-1#the-has-many-through-association.

h4(#has_many-validate). +:validate+

Если установите опцию +:validate+ в +false+, тогда связанные объекты не будут проходить валидацию всякий раз, когда вы сохраняете этот объект. По умолчанию она равна +true+: связанные объекты проходят валидацию, когда этот объект сохраняется.


h5(#has_many-scopes_for_has_many). Скоупы для +has_many+

Иногда хочется настроить запрос, используемый +has_many+. Такая настройка может быть достигнута с помощью блока скоупа. Например:

<ruby>
class Customer < ActiveRecord::Base
  has_many :orders, -> { where :processed => true }
end
</ruby>

Внутри блока скоупа можно использовать любые стандартные "методы запросов":/active-record-query-interface. Далее обсудим следующие из них:

* +where+
* +extending+
* +group+
* +includes+
* +limit+
* +offset+
* +order+
* +readonly+
* +select+
* +uniq+

h6(#belongs_to-where). +where+

Метод +where+ позволяет определить условия, которым должен отвечать связанный объект.

<ruby>
class Customer < ActiveRecord::Base
  has_many :confirmed_orders, -> { where "confirmed = 1" },
    :class_name => "Order"
end
</ruby>

Также можно задать условия хэшем:

<ruby>
class Customer < ActiveRecord::Base
  has_many :confirmed_orders, -> { where :confirmed => true },
    :class_name => "Order"
end
</ruby>

При использовании опции +where+ хэшем, при создание записи через эту связь будет автоматически применен скоуп с использованием хэша. В этом случае при использовании +@customer.confirmed_orders.create+ или +@customer.confirmed_orders.build+ будут созданы заказы, в которых столбец confirmed будет иметь значение +true+.

h6(#has_many-extending). +extending+

Метод +extending+ определяет именнованый модуль для расширения прокси связи. Расширения связей подробно обсуждаются "позже в этом руководстве":/active-record-associations/association-callbacks-and-extensions.

h6(#has_many-group). +group+

Метод +group+ доставляет имя атрибута, по которому группируется результирующий набор, используя выражение +GROUP BY+ в поисковом SQL.

<ruby>
class Customer < ActiveRecord::Base
  has_many :line_items, -> { group 'orders.id' },
    :through => :orders
end
</ruby>

h5(#has_many-includes). +includes+

Можете использовать метод +include+ для определения связей второго порядка, которые должны быть нетерпеливо загружены, когда эта связь используется. Например, рассмотрим эти модели:

<ruby>
class Customer < ActiveRecord::Base
  has_many :orders
end

class Order < ActiveRecord::Base
  belongs_to :customer
  has_many :line_items
end

class LineItem < ActiveRecord::Base
  belongs_to :order
end
</ruby>

Если вы часто получаете позиции прямо из покупателей (+@customer.orders.line_items+),тогда можете сделать свой код более эффективным, включив позиции в связь от покупателей к заказам:

<ruby>
class Customer < ActiveRecord::Base
  as_many :orders, -> { includes :line_items }
end

class Order < ActiveRecord::Base
  belongs_to :customer
  has_many :line_items
end

class LineItem < ActiveRecord::Base
  belongs_to :order
end
</ruby>

h5(#has_many-limit). +limit+

Метод +limit+ позволяет ограничить общее количество объектов, которые будут выбраны через связь.

<ruby>
class Customer < ActiveRecord::Base
  has_many :recent_orders,
    -> { order('order_date desc').limit(100) },
    :class_name => "Order"
end
</ruby>

h5(#has_many-offset). +offset+

Метод +offset+ позволяет определить начальное смещение для выбора объектов через связь. Например, +-> { offset(11) }+ пропустит первые 11 записей.

h5(#has_many-order). +order+

Метод +order+ предписывает порядок, в котором связанные объекты будут получены (в синтаксисе SQL, используемом в условии +ORDER BY+).

<ruby>
class Customer < ActiveRecord::Base
  has_many :orders, -> { order "date_confirmed DESC" }
end
</ruby>

h5(#has_many-readonly). +readonly+

При использовании метода +:readonly+, связанные объекты будут доступны только для чтения, когда получены посредством связи.

h5(#has_many-select). +select+

Метод +select+ позволяет переопределить SQL условие +SELECT+, которое используется для получения данных о связанном объекте. По умолчанию Rails получает все столбцы.

WARNING: Если укажете свой собственный +select+, не забудьте включить столбцы первичного ключа и внешнего ключа в связанной модели. Если так не сделать, Rails выдаст ошибку.

h5(#has_many-uniq). +uniq+

Используйте метод +uniq+, чтобы убирать дубликаты из коллекции. Это полезно в сочетании с опцией +:through+.

<ruby>
class Person < ActiveRecord::Base
  has_many :readings
  has_many :posts, :through => :readings
end

person = Person.create(:name => 'john')
post   = Post.create(:name => 'a1')
person.posts << post
person.posts << post
person.posts.inspect # => [#<Post id: 5, name: "a1">, #<Post id: 5, name: "a1">]
Reading.all.inspect  # => [#<Reading id: 12, person_id: 5, post_id: 5>, #<Reading id: 13, person_id: 5, post_id: 5>]
</ruby>

В вышеописанной задаче два reading, и +person.posts+ выявляет их оба, даже хотя эти записи указывают на один и тот же post.

Давайте установим +:uniq+:

<ruby>
class Person
  has_many :readings
  has_many :posts, -> { uniq }, :through => :readings
end

person = Person.create(:name => 'honda')
post   = Post.create(:name => 'a1')
person.posts << post
person.posts << post
person.posts.inspect # => [#<Post id: 7, name: "a1">]
Reading.all.inspect  # => [#<Reading id: 16, person_id: 7, post_id: 7>, #<Reading id: 17, person_id: 7, post_id: 7>]
</ruby>

В вышеописанной задаче все еще два reading. Однако +person.posts+ показывает только один post, поскольку коллекция загружает только уникальные записи.

h4. Когда сохраняются объекты?

Когда вы назначаете объект связью +has_many+, этот объект автоматически сохраняется (для того, чтобы обновить его внешний ключ). Если назначаете несколько объектов в одном выражении, они все будут сохранены.

Если одно из этих сохранений проваливается из-за ошибок валидации, тогда выражение назначения возвращает +false+, и само назначение отменяется.

Если родительский объект (который объявляет связь +has_many+) является несохраненным (то есть +new_record?+ возвращает +true+) тогда дочерние объекты не сохраняются при добавлении. Все несохраненные члены связи сохранятся автоматически, когда сохранится родительский объект.

Если вы хотите назначить объект связью +has_many+ без сохранения объекта, используйте метод <tt><em>collection</em>.build</tt>.
