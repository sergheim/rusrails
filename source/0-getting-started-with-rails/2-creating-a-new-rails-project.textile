h1. Создание нового проекта Rails

Лучший способ использования этого руководства - проходить каждый шаг и смотреть, что получится, пропустите код или шаг и учебное приложение не заработает, поэтому следует буквально все делать шаг за шагом. Можно получить законченный код "здесь":https://github.com/lifo/docrails/tree/master/guides/code/getting_started.

Следуя этому руководству, вы создадите проект Rails с названием +blog+, очень простой веб-блог. Прежде чем начнем создавать приложение, нужно убедиться, что сам Rails установлен.

TIP: Нижеследующие примеры используют # и $ для обозначения строки ввода терминала суперпользователя и обычного пользователя соответственно в UNIX-подобных операционных системах. Если вы используете Windows, ваша строка будет выглядеть наподобие c:\source_code>

h4. Установка Rails

Для установки Rails используйте команду +gem install+, представленную RubyGems:

<shell>
# gem install rails
</shell>

TIP. Существует ряд инструментов для помощи в быстрой установке Ruby и Ruby on Rails в вашей системе. Пользователи Windows могут использовать "Rails Installer":http://railsinstaller.org, а пользователи Mac OS X могут использовать "Rails One Click":http://railsoneclick.com.

Чтобы проверить, что все установлено верно, нужно выполнить следующее:

<shell>
$ rails --version
</shell>

Если выводится что-то вроде "Rails 3.2.3", можно продолжать.

h4. Создание приложения Blog

Rails поставляется с рядом генераторов, разработанных для облегчения жизни разработчика. Одним из них является генератор нового приложения, предоставляющий вам основу приложения Rails, таким образом, вам не нужно писать его самим.

Для использования этого генератора, откройте терминал, войдите в папку, в которой у вас есть права на создание файлов и напишите:

<shell>
$ rails new blog
</shell>

Это создаст приложение на Rails с именем Blog в директории blog и установит гемы, зависимости от которых упомянуты в +Gemfile+ при использовании +bundle install+.

TIP: Можно посмотреть все возможные опции командной строки, которые принимает билдер приложения на Rails, запустив <tt>rails new -h</tt>.

После того, как вы создали приложение blog, перейдите в его папку, чтобы продолжить работу непосредственно с этим приложением:

<shell>
$ cd blog
</shell>

Команда 'rails new blog', запущенная ранее, создаст папку в вашей рабочей директории, названную +blog+. В директории +blog+ имеется несколько автоматически созданных файлов и папок, задающих структуру приложения на Rails. Большая часть работы в этом самоучителе будет происходить в папке +app/+, но сейчас пробежимся по функциям каждой папки, которые создает Rails в новом приложении по умолчанию:

|_.Файл/Папка|_.Цель|
|app/|Содержит контроллеры, модели, вьюхи, хелперы, рассыльщики и ресурсы вашего приложения. Мы рассмотрим эту папку подробнее далее.|
|config/|Конфигурации правил, маршрутов, базы данных вашего приложения, и т.д. Более подробно это раскрыто в "Конфигурирование приложений на Rails":/configuring-rails-applications|
|config.ru|Конфигурация Rack для серверов, основанных на Rack, используемых для запуска приложения.|
|db/|Содержит текущую схему вашей базы данных, а также миграции базы данных.|
|doc/|Углубленная информация по вашему приложению.|
|Gemfile<br />Gemfile.lock|Эти файлы позволяет определить, какие нужны зависимости от гемов для вашего приложения на Rails. Эти файлы используются гемом Bundler. Подробнее о Bundler смотрите на "сайте Bundler":http://gembundler.com|
|lib/|Внешние модули для вашего приложения.|
|log/|Файлы логов приложения.|
|public/|Единственная папка, которая доступна извне как есть. Содержит статичные файлы и скомпилированные ресурсы.|
|Rakefile|Этот файл содержит набор команд, которые могут быть запущены в командной строке. Определения команд производятся во всех компонентах Rails. Вместо изменения Rakefile, вы можете добавить свои собственные задачи, добавив файлы в директорию lib/tasks вашего приложения.|
|README.rdoc|Это вводный мануал для вашего приложения. Его следует отредактировать, чтобы рассказать остальным, что ваше приложение делает, как его настроить, и т.п.|
|script/|Содержит скрипт rails, который запускает ваше приложение, и может содержать другие скрипты, используемые для развертывания или запуска вашего приложения.|
|test/|Юнит-тесты, фикстуры и прочий аппарат тестирования. Это раскрывается в руководстве "Тестирование приложений на Rails":/a-guide-to-testing-rails-applications|
|tmp/|Временные файлы (такие как файлы кэша, pid и сессии|
|vendor/|Место для кода внешних разработчиков. В типичном приложении на Rails, включает Ruby Gems и исходный код Rails (если вы опционально установили его в свой проект).|
