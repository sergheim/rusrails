h1. Hello, Rails!

Для начала, давайте выведем на экран какой-либо текст. Для этого нужен запущенный сервер вашего приложения на Rails.

h4. Запуск веб-сервера

Фактически у вас уже есть функциональное приложение на Rails. Чтобы убедиться, нужно запустить веб-сервер на вашей машине. Это можно осуществить, запустив:

<shell>
$ rails server
</shell>

TIP: Компилирование CoffeeScript в JavaScript требует JavaScript runtime, и его отсутствие приведет к ошибке +execjs+. Обычно Mac OS X и Windows поставляются с установленным JavaScript runtime. Rails добавляет гем +therubyracer+ в Gemfile нового приложения в закомментированной строке, если нужно, можете ее раскомментировать. +therubyrhino+ -- рекомендованный runtime для пользователей JRuby, он добавляется в Gemfile, если приложение создаётся под JRuby. Можно узнать все о поддерживаемых runtime-ах в "ExecJS":https://github.com/sstephenson/execjs#readme

Это запустит WEBrick, веб-сервер, встроенный в Ruby по умолчанию. Чтобы увидеть приложение в действии, откройте окно браузера и пройдите по адресу "http://localhost:3000":http://localhost:3000. Вы должны увидеть дефолтную информационную страницу Rails:

!/assets/guides/rails_welcome30.png(скриншот Welcome Aboard)!

TIP: Для остановки веб-сервера нажмите Ctrl+C в терминале, где он запущен. В режиме development, Rails в основном не требует остановки сервера; все изменения, которые Вы делаете в файлах, автоматически подхватываются сервером.

Страница "Welcome Aboard" это своеобразный тест для нового приложения на Rails: она показывает, что ваши программы настроены достаточно правильно для отображения страницы. Также можете нажать по ссылке _About your application’s environment_ чтобы увидеть сводку о среде вашего приложения.

h4. Скажите "привет", Рельсы

Чтобы Rails сказал "Привет", нужно создать, как минимум, _контроллер_ и _вьюху_.

Назначением контроллера является получение определенных запросов к приложению. _Роутинг_ решает, какой контроллер получит какие запросы. Часто имеется более одного маршрута к каждому контроллеру, и различные маршруты могут быть обработаны различными _эшнами_. Назначением каждого экшна является сбор информации для предоставления ее во вьюху.

Назначением вьюхи (представления) является отображение этой информации в удобочитаемом формате. Необходимо отметить важное различие, что местом, в котором собирается информация, является _контроллер_, а не вьюха. Вьюха должна только лишь отображать эту информацию. По умолчанию шаблоны вьюх пишутся на языке по имени ERB (Embedded Ruby). преобразовывающийся во время цикла запроса в Rails, перед тем, как быть отосланным пользователю.

Для создания нового контроллера, нужно запустить генератор "controller" и сказать ему, что вы хотите контроллер с именем "welcome" с экшном по имени "index", вот так:

<shell>
$ rails generate controller welcome index
</shell>

Rails создаст несколько файлов и маршрут.

<shell>
create  app/controllers/welcome_controller.rb
 route  get "welcome/index"
invoke  erb
create    app/views/welcome
create    app/views/welcome/index.html.erb
invoke  test_unit
create    test/functional/welcome_controller_test.rb
invoke  helper
create    app/helpers/welcome_helper.rb
invoke    test_unit
create      test/unit/helpers/welcome_helper_test.rb
invoke  assets
invoke    coffee
create      app/assets/javascripts/welcome.js.coffee
invoke    scss
create      app/assets/stylesheets/welcome.css.scss
</shell>

Наиболее важными из них являются, разумеется, контроллер, расположенный в +app/controllers/welcome_controller.rb+, и вьюха, расположенная в +app/views/welcome/index.html.erb+.

Откройте файл +app/views/welcome/index.html.erb+ в текстовом редакторе и отредактируйте его, чтобы он содержал одну строчку кода:

<html>
<h1>Hello, Rails!</h1>
</html>

h4. Настройка домашней страницы приложения

Теперь, когда мы сделали контроллер и вьюху, нужно сказать Rails, что мы хотим увидеть "Hello Rails!". В нашем случае мы хотим это увидеть, когда зайдем в корневой URL нашего сайта, "http://localhost:3000":http://localhost:3000. Однако сейчас это место заняла тестовая "Welcome Aboard".

Чтобы это исправить, удалите файл +index.html+, расположенный в директории +public+ приложения.

Так нужно сделать, так как Rails отдаст любой статичный файл из директории +public+, соответствующий маршруту, предпочтя его любому динамическому содержимому, создаваемому из контроллеров. Файл +index.html+ особенный: он будет отдан, если запрос придет в корневой маршрут, т.е. http://localhost:3000. Если произойдет другой запрос, такой как http://localhost:3000/welcome, будет отдан файл <tt>public/welcome.html</tt>, но только если он существует.

Теперь нужно сказать Rails, где находится настоящая домашняя страница.

Откройте файл +config/routes.rb+ в редакторе.

<ruby>
Blog::Application.routes.draw do
  get "welcome/index"

  # The priority is based upon order of creation:
  # first created -> highest priority.
  # ...
  # You can have the root of your site routed with "root"
  # just remember to delete public/index.html.
  # root :to => "welcome#index"
</ruby>

Это _маршрутный файл_ вашего приложения, который содержит варианты входа на сайт на специальном языке DSL (domain-specific language, предметно-ориентированный язык программирования), который говорит Rails, как соединять входящие запросы с контроллерами и экшнами. Этот файл содержит много закомментированных строк с примерами, и один из них фактически показывает, как соединить корень сайта с определенным контроллером и экшном. Найдите строку, начинающуюся с +root :to+ и раскоментируйте ее. Должно получится следующее:

<ruby>
root :to => "welcome#index"
</ruby>

<tt>root :to => "welcome#index"</tt> говорит Rails направить запросы к корню приложения в экшн index контроллера welcome, а +get "welcome/index"+ говорит Rails направлять запросы к "http://localhost:3000/welcome/index":http://localhost:3000/welcome/index в экшн index контроллера welcome. Он был создан ранее при запуске генератора контроллера (+rails generate controller welcome index+).

Теперь, если вы пройдете по адресу "http://localhost:3000":http://localhost:3000 в браузере, то увидите надпись +Hello, Rails!+, которую вы поместили в  +app/views/welcome/index.html.erb+, показывающую, что этот новый маршрут действительно ведет в экшн +index+ в +WelcomeController+, и вьюха корректно рендерится.

NOTE. Чтобы узнать больше о роутинге, обратитесь к руководству "Роутинг в Rails":/rails-routing.
