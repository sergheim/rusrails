h1. Удаление комментариев

Другой важной особенностью блога является возможность удаления спама. Чтобы сделать это, нужно вставить некоторую ссылку во вьюхе и экшн +DELETE+ в +CommentsController+.

<p>Поэтому сначала добавим ссылку для удаления в партиал <tt>app/views/comments/_comment.html.erb</tt>:</p>

<erb>
<p>
  <strong>Commenter:</strong>
  <%= comment.commenter %>
</p>

<p>
  <strong>Comment:</strong>
  <%= comment.body %>
</p>

<p>
  <%= link_to 'Destroy Comment', [comment.post, comment],
               :method => :delete,
               :data => { :confirm => 'Are you sure?' } %>
</p>
</erb>

Нажатие этой новой ссылки "Destroy Comment" запустит +DELETE /posts/:id/comments/:id+ в нашем +CommentsController+, который затем будет использоваться для нахождения комментария, который мы хотим удалить, поэтому давайте добавим экшн destroy в наш контроллер:

<ruby>
class CommentsController < ApplicationController

  def create
    @post = Post.find(params[:post_id])
    @comment = @post.comments.create(params[:comment])
    redirect_to post_path(@post)
  end

  def destroy
    @post = Post.find(params[:post_id])
    @comment = @post.comments.find(params[:id])
    @comment.destroy
    redirect_to post_path(@post)
  end

end
</ruby>

Экшн +destroy+ найдет публикацию, которую мы просматриваем, обнаружит комментарий в коллекции +@post.comments+ и затем уберет его из базы данных и вернет нас обратно на просмотр публикации.

h4. Удаление связанных объектов

Если удаляете публикацию, связанные с ней комментарии также должны быть удалены. В ином случае они будут просто занимать место в базе данных. Rails позволяет использовать опцию +dependent+ на связи для достижения этого. Измените модель Post, +app/models/post.rb+, следующим образом:

<ruby>
class Post < ActiveRecord::Base
  validates :title, :presence => true,
                    :length => { :minimum => 5 }
  has_many :comments, :dependent => :destroy
end
</ruby>
