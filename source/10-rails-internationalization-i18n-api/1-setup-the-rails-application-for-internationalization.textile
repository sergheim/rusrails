h1. Настройка приложения на Rails для интернационализации

Лишь несколько шагов отделяют вас от получения и запуска поддержки I18n в вашем приложении.

h4. Конфигурирование модуля I18n

Следуя философии примата _соглашений над конфигурацией_, Rails настроит ваше приложение приемлемыми значениями по умолчанию. Если вам необходимы иные настройки, можете просто переписать их.

Rails автоматически добавляет все файлы +.rb+ и +.yml+ из директории +config/locales+ к вашему *пути загрузки переводов.*

Локаль по умолчанию +en.yml+ в этой директории содержит образец строки перевода:

<ruby>
en:
  hello: "Hello world"
</ruby>

Это означает, что в локале +:en+, ключ _hello_ связан со строкой _"Hello world"_. Каждая строка в Rails интернационализируется подобным образом, смотрите, к примеру, валидационные сообщения Active Record в файле "+activerecord/lib/active_record/locale/en.yml+":http://github.com/rails/rails/blob/master/activerecord/lib/active_record/locale/en.yml или форматы времени и даты в файле "+activesupport/lib/active_support/locale/en.yml+":http://github.com/rails/rails/blob/master/activesupport/lib/active_support/locale/en.yml. Для хранения переводов в бэкенде по умолчанию (простом) можете использовать YAML или стандартные хэши Ruby.

Библиотека I18n будет использовать *английский* как *локаль по умолчанию*, т.е., если не хотите установить иную локаль, при поиске переводов будет использоваться +:en+.

NOTE: В библиотеке i18n принят *прагматичный подход* к ключам локали (после "некоторых обсуждений":http://groups.google.com/group/rails-i18n/browse_thread/thread/14dede2c7dbe9470/80eec34395f64f3c?hl=en), включающий только  часть _локаль_ ("язык"), наподобие +:en+, +:pl+, но не часть _регион_, подобно +:en-US+ или +:en-GB+, как традиционно используется для разделения "языков" и "региональных настроек", или "диалектов". Многие международные приложения используют только элемент "язык" локали, такой как +:cs+, +:th+ или +:es+ (для Чехии, Тайланда и Испании).  Однако, также имеются региональные различия внутри языковой группы, которые могут быть важными. Например, в локали +:en-US+ как символ валюты будет $, а в +:en-GB+ будет £. Ничто не остановит вас от разделения региональных и других настроек следующим образом: предоставляете полную локаль "English - United Kingdom" в словаре +:en-GB+. Различные "плагины Rails I18n":http://rails-i18n.org/wiki, такие как "Globalize2":http://github.com/joshmh/globalize2/tree/master помогут это осуществить.

*Путь загрузки переводов* (+I18n.load_path+) - это всего лишь Ruby-массив путей к вашим файлам перевода, которые будут загружены автоматически и будут доступны в вашем приложении. Так что можете подобрать такую схему директорий и именования файлов, которая вам подходит.

NOTE: Бэкенд лениво загружет эти переводы, когда ищет перевод в первый раз. Это дает возможность переключить бэкенд на что-то иное даже после того, как переводы были объявлены.

В файлах +application.rb+ по умолчанию есть инструкция, как добавлять локали из другой директории, и как настраивать другую локаль по умолчанию. Просто раскомментируйте и отредактируйте определенные строки.

<ruby>
# The default locale is :en and all translations from config/locales/*.rb,yml are auto loaded.
# config.i18n.load_path += Dir[Rails.root.join('my', 'locales', '*.{rb,yml}').to_s]
# config.i18n.default_locale = :de
</ruby>

h4. Опционально: Произвольная настройка конфигурации I18n

Для полноты картины, давайте отметим, что если не хочется по каким-то причинам использовать +application.rb+, также всегда можно все настроить вручную.

Чтобы сообщить библиотеке I18n, где она может найти ваши произвольные файлы перевода, можете определить путь загрузки где угодно в вашем приложении - просто убедитесь, что это будет выполнено до того, как какие-либо переводы будут фактически искаться. Таким же образом можно изменить локаль по умолчанию. Самым простым будет поместить следующее в инициализатор:

<ruby>
# in config/initializers/locale.rb

# говорим библиотеке I18n, где искать наши переводы
I18n.load_path += Dir[Rails.root.join('lib', 'locale', '*.{rb,yml}')]

# устанавливаем локаль по умолчанию на что-либо другое, чем :en
I18n.default_locale = :pt
</ruby>

h4. Назначение и передача локали

Если хотите перевести свое приложение на Rails на *один язык, отличный от английского* (локали по умолчанию), можете настроить I18n.default_locale на свою локаль в +application.rb+ или инициализаторе, как показано выше, и это будет сохранено во всех запросах.

Однако, вы можете захотеть *предоставить поддержку для нескольких локалей* в своем приложении. В этом случае нужно установить и передать локаль между запросами.

WARNING: Вы можете попытаться хранить выбранную локаль в _сессии_ или в _куки_, однако *не делайте так*. Локаль должна быть понятной и являться частью URL. Таким образом вы не разрушите основные допущения людей о вебе: если посылаете URL друзьям, они увидят ту же страницу, то же содержимое. Иногда есть исключения из этого правила, которые мы обсудим ниже.

_Назначающая часть_ проста. Можно назначить локаль в +before_filter+ в +ApplicationController+, как тут:

<ruby>
before_filter :set_locale

def set_locale
  I18n.locale = params[:locale] || I18n.default_locale
end
</ruby>

Это требует, чтобы вы передали локаль как параметр запроса URL, как в +http://example.com/books?locale=pt+. (Это, к примеру, подход Гугла.) Таким образом, +http://localhost:3000?locale=pt+ загрузит португальскую локализацию, в то время как +http://localhost:3000?locale=de+ загрузит немецкую локализацию, и так далее. Можете опустить следующий раздел и перейти к разделу *Интернационализация вашего приложения*, если хотите все пробовать с помощью ручной замены локали в URL и перезагрузки страницы.

Конечно, вы не хотите вручную включать локаль в каждом URL своего приложения, или хотите, чтобы URL выглядел по-разному, т.е. +http://example.com/pt/books+ против +http://example.com/en/books+. Давайте обсудим различные опции, которые у нас есть.

h4. Назначение локали из имени домена

Одним из вариантов, которым можно установить локаль, является доменное имя, на котором запущено ваше приложение. Например, мы хотим, чтобы +www.example.com+ загружал английскую локаль (по умолчанию), а +www.example.es+ загружал испанскую локаль. Таким образом, _доменное имя верхнего уровня_ используется для установки локали. В этом есть несколько преимуществ:

* Локаль является <em>явной</em> частью URL.
* Люди интуитивно понимают, на каком языке будет отражено содержимое.
* Это очень просто реализовать в Rails.
* Поисковые движки любят, когда содержимое на различных языках живет на отдельных, взаимосвязанных доменах.

Это осуществляется так в +ApplicationController+:

<ruby>
before_filter :set_locale

def set_locale
  I18n.locale = extract_locale_from_tld || I18n.default_locale
end

# Получаем локаль из домена верхнего уровня или возвращаем nil, если такая локаль недоступна
# Вам следует поместить что-то наподобие этого:
#   127.0.0.1 application.com
#   127.0.0.1 application.it
#   127.0.0.1 application.pl
# в ваш файл /etc/hosts, чтобы попробовать это локально
def extract_locale_from_tld
  parsed_locale = request.host.split('.').last
  I18n.available_locales.include?(parsed_locale.to_sym) ? parsed_locale  : nil
end
</ruby>

Также можно назначить локаль из _поддомена_ похожим образом:

<ruby>
# Получаем код локали из поддомена запроса (подобно http://it.application.local:3000)
# Следует поместить чтото вроде:
#   127.0.0.1 gr.application.local
# в ваш файл /etc/hosts, чтобы попробовать это локально
def extract_locale_from_subdomain
  parsed_locale = request.subdomains.first
  I18n.available_locales.include?(parsed_locale.to_sym) ? parsed_locale : nil
end
</ruby>

Если ваше приложение включает меню переключения локали, вам следует иметь что-то вроде этого в нем:

<ruby>
link_to("Deutsch", "#{APP_CONFIG[:deutsch_website_url]}#{request.env['REQUEST_URI']}")
</ruby>

предполагая, что вы установили +APP_CONFIG[:deutsch_website_url]+ в некоторое значение, наподобие +http://www.application.de+.

У этого решения есть вышеупомянутые преимущества, однако возможно, что вам нельзя или вы не хотите предоставить разные локализации ("языковые версии") на разные доменах. Наиболее очевидным решением является включить код локали в параметры URL (или пути запроса).

h4. Назначение локали из параметров URL

Наиболее обычным способом назначения (и передачи) локали будет включение ее в параметры URL, как мы делали в +I18n.locale = params[:locale]+ в _before_filter_ в первом примере. В этом случае нам нужны URL, такие как +www.example.com/books?locale=ja+ или +www.example.com/ja/books+.

В этом подходе есть почти тот же набор преимуществ, как и в назначении локали из имени домена, а именно то, что это RESTful и соответствует остальной части Всемирной паутины. Хотя внедрение этого потребует немного больше работы.

Получение локали из <tt>params</tt> и соответственное назначение ее не сложно: включаете ее в каждый URL, и таким образом *передаете ее через запросы*. Конечно, включение явной опции в каждый URL (т.е. +link_to( books_url(:locale => I18n.locale))+) было бы утомительно и, вероятно, невозможно.

Rails содержит инфраструктуру для "централизации динамических решений об URL" в его "+ApplicationController#default_url_options":http://api.rubyonrails.org/classes/ActionController/Base.html#M000515, что полезно в этом сценарии: он позволяет нам назначить "defaults" для "+url_for+ ":http://api.rubyonrails.org/classes/ActionController/Base.html#M000503 и методов хелпера, основанных на нем (с помощью применения/переопределения этого метода).

Затем мы можем включить что-то наподобие этого в наш +ApplicationController+:

<ruby>
# app/controllers/application_controller.rb
def default_url_options(options={})
  logger.debug "default_url_options is passed options: #{options.inspect}\n"
  { :locale => I18n.locale }
end
</ruby>

Каждый метод хелпера, зависимый от +url_for+ (т.е. хелперы для именнованных маршрутов, такие как +root_path+ или +root_url+, ресурсные маршруты, такие как +books_path+ или +books_url+ и т.д.) теперь будут *автоматически включать локаль в строку запроса*, как тут: +http://localhost:3001/?locale=ja+.

Это может быть достаточным. Хотя и влияет на читаемость URL, когда локаль "висит" в конце каждого URL вашего приложения. Более того, с точки зрения архитектуры, локаль иерархически выше остальных частей домена приложения, и URL должен отражать это.

Вы, возможно, захотите, чтобы URL выглядел так: +www.example.com/en/books+ (который загружает английскую локаль) и +www.example.com/nl/books+ (который загружает голландскую локаль). Это достижимо с помощью такой же стратегии, как и с +default_url_options+ выше: нужно настроить свои маршруты с помощью опции "+scoping+":http://api.rubyonrails.org/classes/ActionDispatch/Routing/Mapper/Scoping.html следующим образом:

<ruby>
# config/routes.rb
scope "/:locale" do
  resources :books
end
</ruby>

Теперь, когда вы вызовите метод +books_path+, то получите +"/en/books"+ (для локали по умолчанию). URL подобный +http://localhost:3001/nl/books+ загрузит голландскую локаль, и затем, последующий вызов +books_path+ возвратит +"/nl/books"+ (поскольку локаль изменилась).

Если не хотите принудительно использовать локаль в своих маршрутах, можете использовать опциональную область пути (заключенную в скобки), как здесь:

<ruby>
# config/routes.rb
scope "(:locale)", :locale => /en|nl/ do
  resources :books
end
</ruby>

С таким подходом вы не получите +Routing Error+ при доступе к своим ресурсам как +http://localhost:3001/books+ без локали. Это полезно, когда хочется использовать локаль по умолчанию, если она не определена.

Конечно, нужно специально позаботиться о корневом URL (это обычно "домашняя страница" или "лицевая панель") вашего приложения. URL, такой как +http://localhost:3001/nl+ не заработает автоматически, так как объявление +root :to => "books#index"+ в вашем +routes.rb+ не принимает локаль во внимание. (И правильно делает: может быть только один "корневой" URL.)

Вам, вероятно, потребуется связать URL так:

<ruby>
# config/routes.rb
match '/:locale' => 'dashboard#index'
</ruby>

Особенно побеспокойтесь относительно *порядка ваших маршрутов*, чтобы одно объявление маршрутов не "съело" другое. (Вы, возможно, захотите добавить его непосредственно перед объявлением +root :to+.)

NOTE: У этого решения есть один довольно большой *недостаток*. Благодаря применению _"default_url_options"_, вам нужно указывать опцию +:id+ явно, как тут: +link_to 'Show', book_url(:id => book)+, не зависимо от магии Rails в таком коде +link_to 'Show', book+. Если это будет проблемой, обратите внимание на два плагина, упрощающих работу с маршрутами в этом случае: Sven Fuchs's "routing_filter":http://github.com/svenfuchs/routing-filter/tree/master и Raul Murciano's "translate_routes":http://github.com/raul/translate_routes/tree/master. Также посмотрите страницу "How to encode the current locale in the URL":http://rails-i18n.org/wiki/wikipages/how-to-encode-the-current-locale-in-the-url in the Rails i18n Wiki.

h4. Указание локали из информации, предоставленной клиентом

В одельных случаях имеет смысл назначить локаль на основе информации, полученной от клиента, т.е. не из URL. Эта информация может исходить, например, от предпочитаемого пользователем языка (установленного в его браузере), может быть основана на географическом положении пользователя на основе его IP, или пользователи могут предоставить ее, просто указав локаль в своем интерфейсе приложения и сохранив ее в своем профиле. Этот подход более подходит для основанных на веб приложений или сервисов, а не для веб-сайтов - смотрите врезку о _сессиях_, _куки_ и архитектуре RESTful, указанную выше.

h5. Использование +Accept-Language+

Одним из источников информации о клиенте является HTTP заголовок +Accept-Language+. Люди могут "настроить его в своем браузере":http://www.w3.org/International/questions/qa-lang-priorities или другом клиенте (таком как _curl_).

Обычной реализацией использования заголовка +Accept-Language+ будет следующее:

<ruby>
def set_locale
  logger.debug "* Accept-Language: #{request.env['HTTP_ACCEPT_LANGUAGE']}"
  I18n.locale = extract_locale_from_accept_language_header
  logger.debug "* Locale set to '#{I18n.locale}'"
end
private
def extract_locale_from_accept_language_header
  request.env['HTTP_ACCEPT_LANGUAGE'].scan(/^[a-z]{2}/).first
end
</ruby>

Конечно, в рабочей среде нужен более надежный код, можете использовать плагин, такой как Iain Hecker's "http_accept_language":http://github.com/iain/http_accept_language/tree/master или даже промежуточное приложение Rack, такое как Ryan Tomayko's "locale":http://github.com/rtomayko/rack-contrib/blob/master/lib/rack/locale.rb.

h5. Использование базы данных GeoIP (или подобной)

Другим способом выбора локали по клиентской информации может быть использование базы данных для связывания IP клиента с регионом, такой как "GeoIP Lite Country":http://www.maxmind.com/app/geolitecountry. Механизм кода будет очень похож на код выше - нужно запросить у базы данных пользовательский IP, и найти предпочитаемую локаль для возвращенных страны/региона/города.

h5. Профиль пользователя

Можно также предоставить пользователям приложения возможность назначать (или менять) локаль в интерфейсе приложения. И снова, механизм этого подхода очень похож на код выше - вы, возможно, позволите пользователю выбрать локаль из списка и сохраните ее в его профиле в базе данных. Затем вы установите локаль в это значение.
