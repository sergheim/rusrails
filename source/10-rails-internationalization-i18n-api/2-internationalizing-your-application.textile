h1. Интернационализация вашего приложения

Хорошо! Вы уже инициализировали поддержку I18n в своем приложении на Ruby on Rails, и сообщили ему, какую локаль использовать, и как ее сохранять между запросами. С этого момента мы готовы к действительно интересным вещам.

Давайте _интернационализируем_ наше приложение, т.е. абстрагируем каждую специфичную к локали часть, а затем _локализуем_ его, т.е. предоставим необходимые переводы для этих абстракций:

Скорее всего у вас есть что-то подобное в одном из ваших приложений:

<ruby>
# config/routes.rb
Yourapp::Application.routes.draw do
  root :to => "home#index"
end

# app/controllers/home_controller.rb
class HomeController < ApplicationController
  def index
    flash[:notice] = "Hello Flash"
  end
end

# app/views/home/index.html.erb
<h1>Hello World</h1>
<p><%= flash[:notice] %></p>
</ruby>

!/assets/guides/demo_untranslated.png(непереведенная демонстрация rails i18n)!

h4. Добавление переводов

Очевидно, что у нас есть *две строки, локализованные на английском*. Чтобы интернационализировать этот код, *замените эти строки* вызовами хелпера Rails +#t+ с имеющим смысл для перевода ключом:

<ruby>
# app/controllers/home_controller.rb
class HomeController < ApplicationController
  def index
    flash[:notice] = t(:hello_flash)
  end
end

# app/views/home/index.html.erb
<h1><%=t :hello_world %></h1>
<p><%= flash[:notice] %></p>
</ruby>

Теперь при рендере вьюхи будет показано сообщение об ошибке, сообщающее, что отсутствуют переводы для ключей +:hello_world+ и +:hello_flash+.

!/assets/guides/demo_translation_missing.png(демонстрация отсутствия перевода в rails i18n)!

NOTE: Rails добавляет метод хелпера +t+ (+translate+) во вьюхи, так что вам не нужно впечатывать +I18n.t+ каждый раз. Дополнительно этот хелпер ловит отсутствующие переводы и  оборачивает результирующее сообщение об ошибке в +&lt;span class="translation_missing"&gt;+.

Давайте добавим отсутствующие переводы в файлы словарей (т.е. выполним часть "локализация"):

<ruby>
# config/locales/en.yml
en:
  hello_world: Hello world!
  hello_flash: Hello flash!

# config/locales/pirate.yml
pirate:
  hello_world: Ahoy World
  hello_flash: Ahoy Flash
</ruby>

Продолжим. Так как мы не сменили default_locale, I18n будет использовать английский. Теперь ваше приложение покажет:

!/assets/guides/demo_translated_en.png(пример rails i18n, переведенный на английский)!

А когда вы измените URL, чтобы передать пиратскую локаль (+http://localhost:3000?locale=pirate+), то получите:

!/assets/guides/demo_translated_pirate.png(пример rails i18n, переведенный на пиратский)!

NOTE: Нужно перезагрузить сервер после того, как вы добавили новые файлы локали.

Для хранения переводов в SimpleStore можно использовать файлы YAML (+.yml+) или чистого Ruby (+.rb+). YAML является наиболее предпочитаемым вариантом среди разработчиков Rails. Однако у него есть один большой недостаток. YAML очень чувствителен к пробелам и спецсимволам, поэтому приложение может неправильно загрузить ваш словарь. Файлы Ruby уронят ваше приложение при первом же обращении, поэтому вам будет просто найти, что в них неправильно. (Если возникают "странности" со словарями YAML, попробуйте поместить соответствующие части словаря в файл Ruby.)

h4. Передача переменных в переводы

Можно использовать переменные в переводимых сообщениях, и передавать их значения из вьюхи.

<ruby>
# app/views/home/index.html.erb
<%=t 'greet_username', :user => "Bill", :message => "Goodbye" %>

# config/locales/en.yml
en:
  greet_username: "%{message}, %{user}!"
</ruby>

h4. Добавление форматов даты/времени

Хорошо! Теперь давайте добавим временную метку во вьюху, чтобы продемонстрировать особенности *локализации даты/времени*. Чтобы локализовать формат даты, нужно передать объект Time в +I18n.l+, или (лучше) использовать хелпер Rails +#l+. Формат можно выбрать передав опцию +:format+ - по умолчанию используется формат +:default+.

<ruby>
# app/views/home/index.html.erb
<h1><%=t :hello_world %></h1>
<p><%= flash[:notice] %></p
<p><%= l Time.now, :format => :short %></p>
</ruby>

И в нашем файле переводов на пиратский давайте добавим формат времени (в Rails уже есть формат по умолчанию для английского):

<ruby>
# config/locales/pirate.yml
pirate:
  time:
    formats:
      short: "arrrround %H'ish"
</ruby>

Что даст вам:

!/assets/guides/demo_localized_pirate.png(демонстрация локализации времени rails i18n на пиратский)!

TIP: Сейчас вам, возможно, захочется добавить больше форматов для того, чтобы бэкенд I18n работал как нужно (как минимум для локали "pirate"). Конечно, есть большая вероятность, что кто-то еще выполнил всю работу по *переводу значений по умолчанию Rails для вашей локали*. Смотрите в "репозитории rails-i18n на Github":http://github.com/svenfuchs/rails-i18n/tree/master/rails/locale архив с различными файлами локали. Когда вы поместите такой файл(ы) в директорию +config/locales/+, они автоматически станут готовыми для использования.

h4. Правила словообразования для других локалей

Rails 4.0 позволяет определить правила словообразования (такие как единственое и множественное число) для локалец, отличных от английской. В +config/initializers/inflections.rb+ можно определить эти правила для нескольких локалей. Инициализатор содержит пример по умолчанию для определения дополнительных правил для английского; следуйте этому формату для других локалей.

h4. Локализованные вьюхи

Rails 2.3 представил другую удобную особенность локализации: локализованные вьюхи (шаблоны). Скажем, у вас в приложении есть _BooksController_. Экшн _index_ рендерит содержимое в шаблоне +app/views/books/index.html.erb+. Когда вы помещаете _локализованный вариант_ этого шаблона: *+index.es.html.erb+* в ту же директорию, Rails будет рендерить содержимое в этот шаблон, когда локаль будет установлена как +:es+. Когда будет установлена локаль по умолчанию, будет использована обычная вьюха +index.html.erb+. (Будущие версии Rails, возможно, перенесут эту возможность _автоматической_ локализации на файлы в +public+, и т.д.)

Можете использовать эту особенность, например, при работе с большим количеством статичного содержимого, который было бы неудобно вложить в словари YAML или Ruby. Хотя имейте в виду, что любое изменение, которое вы в дальнейшем сделаете в шаблоне, должно быть распространено на все локали.

h4. Организация файлов локали

При использовании дефолтного SimpleStore вместе с библиотекой i18n, словари хранятся в текстовых файлах на диске. Помещение переводов ко всем частям приложения в один файл на локаль будет трудным для управления. Можно хранить эти файлы в иерархии, которая будет для вас понятной.

К примеру, ваша директория +config/locales+ может выглядеть так:

<pre>
|-defaults
|---es.rb
|---en.rb
|-models
|---book
|-----es.rb
|-----en.rb
|-views
|---defaults
|-----es.rb
|-----en.rb
|---books
|-----es.rb
|-----en.rb
|---users
|-----es.rb
|-----en.rb
|---navigation
|-----es.rb
|-----en.rb
</pre>

Таким образом можно разделить модель и имена атрибутов модели от текста внутри вьюх, и все это от "defaults" (т.е. форматов даты и времени). Другие хранилища для библиотеки i18n могут предоставить другие средства подобного разделения.

NOTE: Механизм загрузки локали по умолчанию в Rails не загружает файлы локали во вложенных словарях, как тут. Поэтому, чтобы это заработало, нужно явно указать Rails смотреть глубже:

<ruby>
  # config/application.rb
  config.i18n.load_path += Dir[Rails.root.join('config', 'locales', '**', '*.{rb,yml}')]

</ruby>

Обратите внимание на "Rails i18n Wiki":http://rails-i18n.org/wiki, там есть перечень инструментов для управления переводами.
