h1. Инициализация

h3. Использование файлов инициализаторов

После загрузки фреймворка и любых гемов в вашем приложении, Rails приступает к загрузке инициализаторов. Инициализатор это любой файл с кодом ruby, хранящийся в +/config/initializers+ вашего приложения. Инициализаторы могут использоваться для хранения конфигурационных настроек, которые должны быть выполнены после загрузки фреймворков и гемов, таких как опции для конфигурирования настроек для этих частей.

NOTE: Можно использовать подпапки для организации ваших инициализаторов, если нужно, так как Rails смотрит файловую иерархию в целом в папке +initializers+ и ниже.

TIP: Если имеется какая-либо зависимость от порядка в ваших инициализаторах, можно контролировать порядок загрузки с помощью именования. Инициализационные файлы загружаются в алфавитном порядке их путей. Например, +01_critical.rb+ будет загружен до +02_normal.rb+.

h3. События инициализации

В Rails имеется 5 событий инициализации, которые могут быть встроены в разные моменты (отображено в порядке запуска):

* +before_configuration+: Это запустится как только константа приложения унаследуется от +Rails::Application+. Вызовы +config+ будут произведены до того, как это произойдет.

* +before_initialize+: Это запустится непосредственно перед процессом инициализации с помощью инициализатора +:bootstrap_hook+, расположенного рядом с началом процесса инициализации Rails.

* +to_prepare+: Запустится после того, как инициализаторы будут запущены для всех Railties (включая само приложение), но до нетерпеливой загрузки и построения стека промежуточных программ. Что еще более важно, запустится после каждого запроса в +development+, но только раз (при загрузке) в +production+ и +test+.

* +before_eager_load+: Это запустится непосредственно после нетерпеливой загрузки, что является поведением по умолчанию для среды +production+, но не +development+.

* +after_initialize+: Запустится сразу после инициализации приложения, но до запуска инициализаторов приложения.

Чтобы определить событие для них, используйте блочный синтаксис в подклассе +Rails::Application+, +Rails::Railtie+ или +Rails::Engine+:

<ruby>
module YourApp
  class Application < Rails::Application
    config.before_initialize do
      # тут идет инициализационный код
    end
  end
end
</ruby>

Это можно сделать также с помощью метода +config+ на объекте +Rails.application+:

<ruby>
Rails.application.config.before_initialize do
  # тут идет инициализационный код
end
</ruby>

WARNING: Некоторые части вашего приложения, в частности обсерверы и роутинг, пока еще не настроены в месте, где вызывается блок +after_initialize+.

h4. +Rails::Railtie#initializer+

В Rails имеется несколько инициализаторов, выполняющихся при запуске, все они определены с использованием метода +initializer+ из +Rails::Railtie+. Вот пример инициализатора +initialize_whiny_nils+ из Active Support:

<ruby>
initializer "active_support.initialize_whiny_nils" do |app|
  require 'active_support/whiny_nil' if app.config.whiny_nils
end
</ruby>

Метод +initializer+ принимает три аргумента, первый имя инициализатора, второй хэш опций (здесь не показан) и третий блок. В хэше опций может быть определен ключ +:before+ для указания, перед каким инициализатором должен быть зпущен новый инициализатор, и ключ +:after+ определяет, после какого инициализатора запустить этот.

Инициализаторы, определенные методом +initializer+, будут запущены в порядке, в котором они определены, за исключением тех, в которых использованы методы +:before+ или +:after+.

WARNING: Можно помещать свои инициализаторы до или после других инициализаторов в цепочки, пока это логично. Скажем, имеется 4 инициализатора, названные от "one" до "four" (определены в этом порядке), и вы определяете "four" идти _before_ "four", но _after_ "three", это не логично, и Rails не сможет установить ваш порядок инициализаторов.

Блочный аргумент метода +initializer+ это экземпляр самого приложение, таким образом, можно получить доступ к его конфигурации, используя метод +config+, как это сделано в примере.

Поскольку +Rails::Application+ унаследован от +Rails::Railtie+ (опосредованно), можно использовать метод +initializer+ в +config/application.rb+ для определения инициализаторов для приложения.

h4. Инициализаторы

Ниже приведен полный список всех инициализаторов, присутствующих в Rails в порядке,в котором они определены (и, следовательно, запущены, если не указано иное).

*+load_environment_hook+*
Служит плейсхолдером, так что +:load_environment_config+ может быть определено для запуска до него.

*+load_active_support+* Требует +active_support/dependencies+, настраивающий основу для Active Support. Опционально требует +active_support/all+, если +config.active_support.bare+ не истинно, что является значением по умолчанию.

*+initialize_logger+* Инициализирует логгер (объект +ActiveSupport::BufferedLogger+) для приложения и делает его доступным как +Rails.logger+, если до него другой инициализатор не определит +Rails.logger+.

*+initialize_cache+* Если +Rails.cache+ еще не установлен, инициализирует кэш, обращаясь к значению +config.cache_store+ и сохраняя результат как +Rails.cache+. Если этот объект отвечает на метод +middleware+, его промежуточная программа вставляется до +Rack::Runtime+ в стеке промежуточных программ.

*+set_clear_dependencies_hook+* Представляет хук для использования +active_record.set_dispatch_hooks+, запускаемого до этого инициализатора. Этот инициализатор -- запускающийся только если +cache_classes+ установлена +false+ -- использует +ActionDispatch::Callbacks.after+ для удаления констант, на которые ссылались на протяжении запроса от пространства объекта, так что они могут быть перезагружены в течение следующего запроса.

*+initialize_dependency_mechanism+* Если +config.cache_classes+ true, конфигурирует +ActiveSupport::Dependencies.mechanism+ требовать (+require+) зависимости, а не загружать (+load+) их.

*+bootstrap_hook+* Запускает все сконфигурированные блоки +before_initialize+.

*+i18n.callbacks+* В среде development, настраивает колбэк +to_prepare+, вызывающий +I18n.reload!+, если любая из локалей изменилась с последнего запроса. В режиме production этот колбэк запускается один раз при первом запросе.

*+active_support.initialize_whiny_nils+* Требует +active_support/whiny_nil+, если +config.whiny_nils+ true. Этот файл выведет ошибки, такие как:

<plain>
  Called id for nil, which would mistakenly be 4 -- if you really wanted the id of nil, use object_id
</plain>

И:

<plain>
You have a nil object when you didn't expect it!
You might have expected an instance of Array.
The error occurred while evaluating nil.each
</plain>

*+active_support.deprecation_behavior+* Настраивает отчеты об устаревании для сред, по умолчанию +:log+ для development, +:notify+ для production и +:stderr+ для test. Если для +config.active_support.deprecation+ не установлено значение, то инициализатор подскажет пользователю сконфигурировать эту строку в файле +config/environments+ текущей среды. Можно установить массив значений.

*+active_support.initialize_time_zone+* Устанавливает для приложения временную зону по умолчанию, основываясь на настройке +config.time_zone+, которая по умолчанию равна "UTC".

*+action_dispatch.configure+* Конфигурирует +ActionDispatch::Http::URL.tld_length+ быть равным значению +config.action_dispatch.tld_length+.

*+action_view.cache_asset_ids+* Устанавливает +ActionView::Helpers::AssetTagHelper::AssetPaths.cache_asset_ids+ +false+ при загрузке Active Support, но только, если +config.cache_classes+ тоже +false+.

*+action_view.javascript_expansions+* Регистрирует расширения, установленные +config.action_view.javascript_expansions+ и +config.action_view.stylesheet_expansions+, чтобы они распознавались Action View, и, следовательно, могли быть использованы во вьюхах.

*+action_view.set_configs+* Устанавливает, чтобы Action View использовал настройки в +config.action_view+, посылая имена методов через +send+ как сеттер в +ActionView::Base+ и передавая в него значения.

*+action_controller.logger+* Устанавливает +ActionController::Base.logger+ -- если он еще не установлен -- в +Rails.logger+.

*+action_controller.initialize_framework_caches+* Устанавливает +ActionController::Base.cache_store+ -- если он еще не установлен -- в +Rails.cache+.

*+action_controller.set_configs+* Устанавливает, чтобы Action Controller использовал настройки в +config.action_controller+, посылая имена методов через +send+ как сеттер в +ActionController::Base+ и передавая в него значения.

*+action_controller.compile_config_methods+* Инициализирует методы для указанных конфигурационных настроек, чтобы доступ к ним был быстрее.

*+active_record.initialize_timezone+* Устанавливает +ActiveRecord::Base.time_zone_aware_attributes+ true, а также +ActiveRecord::Base.default_timezone+ UTC. Когда атрибуты считываются из базы данных, они будут конвертированы во временную зону с использованием +Time.zone+.

*+active_record.logger+* Устанавливает +ActiveRecord::Base.logger+ -- если еще не установлен -- как +Rails.logger+.

*+active_record.set_configs+* Устанавливает, чтобы Active Record использовал настройки в +config.active_record+, посылая имена методов через +send+ как сеттер в +ActiveRecord::Base+ и передавая в него значения.

*+active_record.initialize_database+* Загружает конфигурацию базы данных (по умолчанию) из +config/database.yml+ и устанавливает соединение для текущей среды.

*+active_record.log_runtime+* Включает +ActiveRecord::Railties::ControllerRuntime+, ответственный за отчет в логгер по времени, затраченному вызовом Active Record для запроса.

*+active_record.set_dispatch_hooks+* Сбрасывает все перезагружаемые соединения к базе данных, если +config.cache_classes+ установлена +false+.

*+action_mailer.logger+* Устанавливает +ActionMailer::Base.logger+ -- если еще не установлен -- как +Rails.logger+.

*+action_mailer.set_configs+* Устанавливает, чтобы Action Mailer использовал настройки в +config.action_mailer+, посылая имена методов через +send+ как сеттер в +ActionMailer::Base+ и передавая в него значения.

*+action_mailer.compile_config_methods+* Инициализирует методы для указанных конфигурационных настроек, чтобы доступ к ним был быстрее.

*+set_load_path+* Этот инициализатор запускается перед +bootstrap_hook+. Добавляет +vendor+, +lib+, все директории в +app+ и любые пути, определенные +config.load_paths+, к +$LOAD_PATH+.

*+set_autoload_paths+* Этот инициализатор запускается перед +bootstrap_hook+. Добавляет все поддиректории +app+ и пути, определенные +config.autoload_paths+, в +ActiveSupport::Dependencies.autoload_paths+.

*+add_routing_paths+* Загружает (по умолчанию) все файлы +config/routes.rb+ (в приложении и railties, включая engine-ы) и настраивает маршруты для приложения.

*+add_locales+* Добавляет файлы в +config/locales+ (из приложения, railties и engine-ов) в +I18n.load_path+, делая доступными переводы в этих файлах.

*+add_view_paths+* Добавляет директорию +app/views+ из приложения, railties и engine-ов в путь поиска файлов вьюх приложения.

*+load_environment_config+* Загружает файл +config/environments+ для текущей среды.

*+append_asset_paths+* Находит пути ресурсов для приложения и всех присоединенных railties и отслеживает доступные директории в +config.static_asset_paths+.

*+prepend_helpers_path+* Добавляет директорию +app/helpers+ из приложения, railties и engine-ов в путь поиска файлов хелперов приложения.

*+load_config_initializers+* Загружает все файлы Ruby из +config/initializers+ в приложении, railties и engine-ах. Файлы в этой директории могут использоваться для хранения конфигурационных настроек, которые нужно сделать после загрузки всех фреймворков.

*+engines_blank_point+* Предоставляет точку инициализации для хука, если нужно что-то сделать до того, как загрузятся engine-ы. После этой точки будут запущены все инициализаторы railtie и engine-ов.

*+add_generator_templates+* Находит шаблоны для генераторов в +lib/templates+ приложения, railities и дижков, и добавляет их в настройку +config.generators.templates+, что делает шаблоны доступными для всех ссылающихся генераторов.

*+ensure_autoload_once_paths_as_subset+* Убеждается, что +config.autoload_once_paths+ содержит пути только из +config.autoload_paths+. Если она содержит другие пути, будет вызвано исключение.

*+add_to_prepare_blocks+* Блок для каждого вызова +config.to_prepare+ в приложении, railtie или engine добавляется в колбэк +to_prepare+ для Action Dispatch, который будет запущен при каждом запросе в development или перед первым запросом в production.

*+add_builtin_route+* Если приложение запускается в среде development, то в маршруты приложения будет добавлен маршрут для +rails/info/properties+. Этот маршрут предоставляет подробную информацию, такую как версию Rails and Ruby для +public/index.html+ в приложении Rails по умолчанию.

*+build_middleware_stack+* Создает стек промежуточных программ для приложения, возвращает объект, у которого есть метод +call+, принимающий объект среды Rack для запроса.

*+eager_load!+* Если +config.eager_load+ true, запускает хуки +config.before_eager_load+, а затем вызывает +eager_load!+, загружающий все +config.eager_load_namespaces+.

*+finisher_hook+* Представляет хук после завершения процесса инициализации приложения, а также запускает все блоки +config.after_initialize+ для приложения, railties и engine-ов.

*+set_routes_reloader+* Конфигурирует Action Dispatch, перезагружая файл маршрутов с использованием +ActionDispatch::Callbacks.to_prepare+.

*+disable_dependency_loading+* Отключает автоматическую загрузку зависимостей, если +config.eager_load+ установлена true.
