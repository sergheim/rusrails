h1. Расширения ко всем объектам

h4. +blank?+ и +present?+

Следующие значения рассматриваются как пустые (blank) в приложении на Rails:

* +nil+ и +false+,
* строки, состоящие только из пробелов (смотрите примечание ниже),
* пустые массивы и хэши,
* и любые другие объекты, откликающиеся на +empty?+, и являющиеся пустыми.

INFO: Условие для строк использует учитывающий Unicode символьный класс +[:space:]+, поэтому, к примеру, U+2029 (разделитель параграфов) рассматривается как пробел.

WARNING: Отметьте, что числа тут не упомянуты, в частности, 0 и 0.0 *не* являются пустыми.

Например, этот метод из +ActionDispatch::Session::AbstractStore+ использует +blank?+ для проверки, существует ли ключ сессии:

<ruby>
def ensure_session_key!
  if @key.blank?
    raise ArgumentError, 'A key is required...'
  end
end
</ruby>

Метод +present?+ является эквивалентом +!blank?+. Этот пример взят из +ActionDispatch::Http::Cache::Response+:

<ruby>
def set_conditional_cache_control!
  return if self["Cache-Control"].present?
  ...
end
</ruby>

NOTE: Определено в +active_support/core_ext/object/blank.rb+.

h4. +presence+

Метод +presence+ возвращает его получателя, если +present?+, и +nil+ в противном случае. Он полезен для подобных идиом:

<ruby>
host = config[:host].presence || 'localhost'
</ruby>

NOTE: Определено в +active_support/core_ext/object/blank.rb+.

h4. +duplicable?+

Некоторые фундаментальные объекты в Ruby являются одноэлементными. Например, в течение жизненного цикла программы число 1 всегда относится к одному экземпляру:

<ruby>
1.object_id                 # => 3
Math.cos(0).to_i.object_id  # => 3
</ruby>

Следовательно, нет никакого способа дублировать эти объекты с помощью +dup+ или +clone+:

<ruby>
true.dup  # => TypeError: can't dup TrueClass
</ruby>

Некоторые числа, не являющиеся одноэлементными, также не могут быть дублированы:

<ruby>
0.0.clone        # => allocator undefined for Float
(2**1024).clone  # => allocator undefined for Bignum
</ruby>

Active Support предоставляет +duplicable?+ для программного запроса к объекту о таком свойстве:

<ruby>
"".duplicable?     # => true
false.duplicable?  # => false
</ruby>

По определению все объекты являются +duplicable?+, кроме +nil+, +false+, +true+, символов, чисел и объектов class и module.

WARNING. Любой класс может запретить дублирование, убрав +dup+ и +clone+, или вызвав исключение в них, тогда только +rescue+ может сказать, является ли данный отдельный объект дублируемым. +duplicable?+ зависит от жестко заданного вышеуказанного перечня, но он намного быстрее, чем +rescue+. Используйте его, только если знаете, что жесткий перечень достаточен в конкретном случае.

NOTE: Определено в +active_support/core_ext/object/duplicable.rb+.

h4. +deep_dup+

Метод +deep_dup+ возвращает "глубокую" копию данного объекта. Обычно при вызове +dup+ на объекте, содержащем другие объекты, ruby не вызывает +dup+ для них. Если, к примеру, у вас имеется массив со строкой, это будет выглядеть так:

<ruby>
array     = ['string']
duplicate = array.dup

duplicate.push 'another-string'

# объект был дублирован, поэтому элемент был добавлен только в дубликат
array     #=> ['string']
duplicate #=> ['string', 'another-string']

duplicate.first.gsub!('string', 'foo')

# первый элемент не был дублирован, он будет изменен в обоих массивах
array     #=> ['foo']
duplicate #=> ['foo', 'another-string']
</ruby>

Как видите, после дублирования экземпляра +Array+, мы получили другой объект, следовательно мы можем его изменить, и оригинальный объект останется нетронутым. Однако, это не истинно для элементов массива. Поскольку +dup+ не делает "глубокую" копию, строка внутри массива все еще тот же самый объект.

Если нужна "глубокая" копия объекта, следует использовать +deep_dup+. Вот пример:

<ruby>
array     = ['string']
duplicate = array.deep_dup

duplicate.first.gsub!('string', 'foo')

array     #=> ['string']
duplicate #=> ['foo']
</ruby>

Если объект нельзя дублировать, +deep_dup+ просто возвратит этот объект:

<ruby>
number = 1
dup = number.deep_dup
number.object_id == dup.object_id   # => true
</ruby>

NOTE: Определено в +active_support/core_ext/object/deep_dup.rb+.

h4. +try+

Когда хотите вызвать метод на объекте, но только, если он не +nil+, простейщим способом достичб этого является условное выражение, добавляющее ненужный код. Альтернативой является использование +try+. +try+ похож на +Object#send+ за исключением того, что он возвращает +nil+, если вызван на +nil+.

Вот пример:

<ruby>
# without try
unless @number.nil?
  @number.next
end

# with try
@number.try(:next)
</ruby>

Другим примером является этот код из +ActiveRecord::ConnectionAdapters::AbstractAdapter+, где +@logger+ может быть +nil+. Код использует +try+ и избегает ненужной проверки.

<ruby>
def log_info(sql, name, ms)
  if @logger.try(:debug?)
    name = '%s (%.1fms)' % [name || 'SQL', ms]
    @logger.debug(format_log_entry(name, sql.squeeze(' ')))
  end
end
</ruby>

+try+ также может быть вызван не с аргументами, а с блоком, который будет выполнен, если объект не nil:

<ruby>
@person.try { |p| "#{p.first_name} #{p.last_name}" }
</ruby>

NOTE: Определено в +active_support/core_ext/object/try.rb+.

h4. +class_eval(*args, &block)+

Можно вычислить код в контексте экземпляра класса любого объекта, используя +class_eval+:

<ruby>
class Proc
  def bind(object)
    block, time = self, Time.current
    object.class_eval do
      method_name = "__bind_#{time.to_i}_#{time.usec}"
      define_method(method_name, &block)
      method = instance_method(method_name)
      remove_method(method_name)
      method
    end.bind(object)
  end
end
</ruby>

NOTE: Определено в +active_support/core_ext/kernel/singleton_class.rb+.

h4. +acts_like?(duck)+

Метод +acts_like?+ предоставляет способ проверки, работает ли некий класс как некоторый другой класс, основываясь на простом соглашении: класс предоставляющий тот же интерфейс, как у +String+ определяет

<ruby>
def acts_like_string?
end
</ruby>

являющийся всего лишь маркером, его содержимое или возвращаемое значение ничего не значит. Затем, код клиента может безопасно запросить следующим образом:

<ruby>
some_klass.acts_like?(:string)
</ruby>

В Rails имеются классы, действующие как +Date+ или +Time+ и следующие этому соглашению.

NOTE: Определено в +active_support/core_ext/object/acts_like.rb+.

h4. +to_param+

Все объекты в Rails отвечают на метод +to_param+, который преднозначен для возврата чего-то, что представляет их в строке запроса или как фрагменты URL.

По умолчанию +to_param+ просто вызывает +to_s+:

<ruby>
7.to_param # => "7"
</ruby>

Возвращаемое значение +to_param+ *не* должно быть экранировано:

<ruby>
"Tom & Jerry".to_param # => "Tom & Jerry"
</ruby>

Некоторые классы в Rails переопределяют этот метод.

Например, +nil+, +true+ и +false+ возвращают сами себя. +Array#to_param+ вызывает +to_param+ на элементах и соединяет результат с помощью "/":

<ruby>
[0, true, String].to_param # => "0/true/String"
</ruby>

В частности, система маршрутов Rails вызывает +to_param+ на моделях, чтобы получить значение для заполнения +:id+. +ActiveRecord::Base#to_param+ возвращает +id+ модели, но можно переопределить этот метод в своих моделях. Например, задав

<ruby>
class User
  def to_param
    "#{id}-#{name.parameterize}"
  end
end
</ruby>

мы получим:

<ruby>
user_path(@user) # => "/users/357-john-smith"
</ruby>

WARNING. Контроллерам нужно быть в курсе любых переопределений +to_param+, поскольку в подобном запросе "357-john-smith" будет значением +params[:id]+.

NOTE: Определено в +active_support/core_ext/object/to_param.rb+.

h4. +to_query+

За исключением хэшей, для заданного неэкранированного +ключа+ этот метод создает часть строки запроса, который связывает с этим ключом то, что возвращает +to_param+. Например, задав

<ruby>
class User
  def to_param
    "#{id}-#{name.parameterize}"
  end
end
</ruby>

мы получим:

<ruby>
current_user.to_query('user') # => user=357-john-smith
</ruby>

Этот метод экранирует все, что требуется: и ключ, и значение:

<ruby>
account.to_query('company[name]')
# => "company%5Bname%5D=Johnson<plus>%26<plus>Johnson"
</ruby>

поэтому результат готов для использования в строке запроса.

Массивы возвращают результат применения +to_query+ к каждому элементу с <tt>_key_[]</tt> как ключом, и соединяет результат с помощью "&":

<ruby>
[3.4, -45.6].to_query('sample')
# => "sample%5B%5D=3.4&sample%5B%5D=-45.6"
</ruby>

Хэши также отвечают на +to_query+, но в другом ключе. Если аргументы не заданы, вызов создает сортированную серию назначений ключ/значение, вызвав +to_query(key)+ на его значениях. Затем он соединяет результат с помощью "&":

<ruby>
{:c => 3, :b => 2, :a => 1}.to_query # => "a=1&b=2&c=3"
</ruby>

метод +Hash#to_query+ принимает опциональное пространство имен для ключей:

<ruby>
{:id => 89, :name => "John Smith"}.to_query('user')
# => "user%5Bid%5D=89&user%5Bname%5D=John+Smith"
</ruby>

NOTE: Определено в +active_support/core_ext/object/to_query.rb+.

h4. +with_options+

Метод +with_options+ предоставляет способ для исключения общих опций в серии вызовов метода.

Задав хэш опций по умолчанию, +with_options+ предоставляет прокси на объект в блок. В блоке методы, вызванные на прокси, возвращаются получателю с прикрепленными опциями. Например, имеются такие дублирования:

<ruby>
class Account < ActiveRecord::Base
  has_many :customers, :dependent => :destroy
  has_many :products,  :dependent => :destroy
  has_many :invoices,  :dependent => :destroy
  has_many :expenses,  :dependent => :destroy
end
</ruby>

заменяем:

<ruby>
class Account < ActiveRecord::Base
  with_options :dependent => :destroy do |assoc|
    assoc.has_many :customers
    assoc.has_many :products
    assoc.has_many :invoices
    assoc.has_many :expenses
  end
end
</ruby>

Эта идиома также может передавать _группировку_ в reader. Например скажем, что нужно послать письмо, язык которого зависит от пользователя. Где-нибудь в рассыльщике можно сгруппировать локале-зависимые кусочки, наподобие этих:

<ruby>
I18n.with_options :locale => user.locale, :scope => "newsletter" do |i18n|
  subject i18n.t :subject
  body    i18n.t :body, :user_name => user.name
end
</ruby>

TIP: Поскольку +with_options+ перенаправляет вызовы получателю, они могут быть вложены. Каждый уровень вложения объединит унаследованные значения со своими собственными.

NOTE: Определено в +active_support/core_ext/object/with_options.rb+.

h4. Переменные экземпляра

Active Support предоставляет несколько методов для облегчения доступа к переменным экземпляра.

h5. +instance_variable_names+

В Ruby 1.8 и 1.9 есть метод +instance_variables+, возвращающий имена определенных переменных экземпляра. Но они ведут себя по-разному, в 1.8 он возвращает строки, в то время как в 1.9 он возвращает символы. Active Support определяет +instance_variable_names+ как способ сохранить их как строки:

<ruby>
class C
  def initialize(x, y)
    @x, @y = x, y
  end
end

C.new(0, 1).instance_variable_names # => ["@y", "@x"]
</ruby>

WARNING: Порядок, в котором имена возвращаются, не определен, и он в действительности определяется версией интерпретатора.

NOTE: Определено в +active_support/core_ext/object/instance_variables.rb+.

h5. +instance_values+

Метод +instance_values+ возвращает хэш, который связывает имена переменных экземпляра без "@" с их соответствующими значениями. Ключи являются строками:

<ruby>
class C
  def initialize(x, y)
    @x, @y = x, y
  end
end

C.new(0, 1).instance_values # => {"x" => 0, "y" => 1}
</ruby>

NOTE: Определено в +active_support/core_ext/object/instance_variables.rb+.

h4. Отключение предупреждений, потоки и исключения

Методы +silence_warnings+ и +enable_warnings+ изменяют значение +$VERBOSE+ на время исполнения блока, и возвращают исходное значение после его окончания:

<ruby>
silence_warnings { Object.const_set "RAILS_DEFAULT_LOGGER", logger }
</ruby>

Можно отключить любой поток пока запущен блок с помощью +silence_stream+:

<ruby>
silence_stream(STDOUT) do
  # STDOUT is silent here
end
</ruby>

Метод +quietly+ обычно используется в случаях, когда вы хотите отключить STDOUT и STDERR, даже в подпроцессах:

<ruby>
quietly { system 'bundle install' }
</ruby>

Например, тестовый набор railties использует его в нескольких местах, чтобы избежать вывода сообщений команды, смешанный со статусом прогресса.

Отключение исключений также возможно с помощью +suppress+. Этот метод получает определенное количество классов исключений. Если вызывается исключение на протяжении выполнения блока, и +kind_of?+ соответствует любому аргументу, +suppress+ ловит его и возвращает отключенным. В противном случае исключение перевызывается:

<ruby>
# Если пользователь под блокировкой, инкремент теряется, ничего страшного.
suppress(ActiveRecord::StaleObjectError) do
  current_user.increment! :visits
end
</ruby>

NOTE: Определено в +active_support/core_ext/kernel/reporting.rb+.

h4. +in?+

Условие +in?+ проверяет, включен ли объект в другой объект или список объектов. Если передан единственный элемент и он не отвечает на +include?+, будет вызвано исключение +ArgumentError+.

Примеры +in?+:

<ruby>
1.in?(1,2)          # => true
1.in?([1,2])        # => true
"lo".in?("hello")   # => true
25.in?(30..50)      # => false
1.in?(1)            # => ArgumentError
</ruby>

NOTE: Определено в +active_support/core_ext/object/inclusion.rb+.
