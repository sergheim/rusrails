h1. Расширения для  Array

h4. Доступ

Active Support расширяет API массивов для облегчения различных путей доступа к ним. Например, +to+ возвращает подмассив элементов от первого до переданного индекса:

<ruby>
%w(a b c d).to(2) # => %w(a b c)
[].to(7)          # => []
</ruby>

Подобным образом +from+ возвращает хвост массива от элемента с переданным индексом:

<ruby>
%w(a b c d).from(2)  # => %w(c d)
%w(a b c d).from(10) # => []
[].from(0)           # => []
</ruby>

Методы +second+, +third+, +fourth+ и +fifth+ возвращают соответствующие элементы (+first+ является встроенным). Благодаря социальной мудрости и всеобщей позитивной конструктивности, +forty_two+ также доступен.

<ruby>
%w(a b c d).third # => c
%w(a b c d).fifth # => nil
</ruby>

NOTE: Определено в +active_support/core_ext/array/access.rb+.

h4. Добавление элементов

h5. +prepend+

Этот метод - псевдоним <tt>Array#unshift</tt>.

<ruby>
%w(a b c d).prepend('e')  # => %w(e a b c d)
[].prepend(10)            # => [10]
</ruby>

NOTE: Определено в +active_support/core_ext/array/prepend_and_append.rb+.

h5. +append+

Этот метод - псевдоним <tt>Array#<<</tt>.

<ruby>
%w(a b c d).append('e')  # => %w(a b c d e)
[].append([1,2])         # => [[1,2]]
</ruby>

NOTE: Определено в +active_support/core_ext/array/prepend_and_append.rb+.

h4. Извлечение опций

Когда последний аргумент в вызове метода является хэшем, за исключением, пожалуй, аргумента +&block+, Ruby позволяет опустить скобки:

<ruby>
User.exists?(:email => params[:email])
</ruby>

Этот синтаксический сахар часто используется в Rails для избежания позиционных аргументов там, где их не слишком много, предлагая вместо них интерфейсы, эмулирующие именнованные параметры. В частности, очень характерно использовать такой хэш для опций.

Если метод ожидает различное количество аргументов и использует +*+ в своем объявлении, однако хэш опций завершает их и является последним элементом массива аргументов, тогда тип теряет свою роль.

В этих случаях можно задать хэшу опций отличительную трактовку с помощью +extract_options!+. Метод проверяет тип последнего элемента массива. Если это хэш, он вырезает его и возвращает, в противном случае возвращает пустой хэш.

Давайте рассмотрим пример определения макроса контроллера +caches_action+:

<ruby>
def caches_action(*actions)
  return unless cache_configured?
  options = actions.extract_options!
  ...
end
</ruby>

Этот метод получает определенное число имен экшнов и необязательный хэш опций как последний аргумент. Вызвав +extract_options!+ получаем хэш опций и убираем его из +actions+ просто и ясно.

NOTE: Определено в +active_support/core_ext/array/extract_options.rb+.

h4. Конвертирование

h5. +to_sentence+

Метод +to_sentence+ превращает массив в строку, содержащую выражение, перечисляющее его элементы:

<ruby>
%w().to_sentence                # => ""
%w(Earth).to_sentence           # => "Earth"
%w(Earth Wind).to_sentence      # => "Earth and Wind"
%w(Earth Wind Fire).to_sentence # => "Earth, Wind, and Fire"
</ruby>

Этот метод принимает три опции:

* +:two_words_connector+: Что используется для массивов с длиной 2. По умолчанию " and ".
* +:words_connector+: Что используется для соединения элементов массивов с 3 и более элементами, кроме последних двух. По умолчанию ", ".
* +:last_word_connector+: Что используется для соединения последних элементов массива из 3 и более элементов. По умолчанию ", and ".

Умолчания для этих опций могут быть локализованы, их ключи следующие:

|_. Опция                       |_. Ключ I18n                                |
| <tt>:two_words_connector</tt> | <tt>support.array.two_words_connector</tt> |
| <tt>:words_connector</tt>     | <tt>support.array.words_connector</tt>     |
| <tt>:last_word_connector</tt> | <tt>support.array.last_word_connector</tt> |

Опции +:connector+ и +:skip_last_comma+ устарели.

NOTE: Определено в +active_support/core_ext/array/conversions.rb+.

h5. +to_formatted_s+

Метод +to_formatted_s+ по умолчанию работает как +to_s+.

Однако, если массив содержит элементы, откликающиеся на +id+, он может передать символ +:db+ как аргумент. Это обычно используется с коллекциями AR. Возвращаемые строки следующие:

<ruby>
[].to_formatted_s(:db)            # => "null"
[user].to_formatted_s(:db)        # => "8456"
invoice.lines.to_formatted_s(:db) # => "23,567,556,12"
</ruby>

Цифры в примере выше предполагаются пришедшими от соответствующих вызовов +id+.

NOTE: Определено в +active_support/core_ext/array/conversions.rb+.

h5. +to_xml+

Метод +to_xml+ возвращает строку, содержащую представление XML его получателя:

<ruby>
Contributor.limit(2).order(:rank).to_xml
# =>
# <?xml version="1.0" encoding="UTF-8"?>
# <contributors type="array">
#   <contributor>
#     <id type="integer">4356</id>
#     <name>Jeremy Kemper</name>
#     <rank type="integer">1</rank>
#     <url-id>jeremy-kemper</url-id>
#   </contributor>
#   <contributor>
#     <id type="integer">4404</id>
#     <name>David Heinemeier Hansson</name>
#     <rank type="integer">2</rank>
#     <url-id>david-heinemeier-hansson</url-id>
#   </contributor>
# </contributors>
</ruby>

Чтобы это сделать, он посылает +to_xml+ к каждому элементу за раз и собирает результаты в корневом узле. Все элементы должны откликаться на +to_xml+, иначе будет вызвано исключение.

По умолчанию имя корневого элемента будет версией имени класса первого элемента во множественном числе, подчеркиваниями и дефисами, при условии что остальные элементы принадлежат этому типу (проверяется с помощью +is_a?+) и они не хэши. В примере выше это "contributors".

Если имеется любой элемент, не принадлежащий типу первого, корневой узел становится "objects":

<ruby>
[Contributor.first, Commit.first].to_xml
# =>
# <?xml version="1.0" encoding="UTF-8"?>
# <objects type="array">
#   <object>
#     <id type="integer">4583</id>
#     <name>Aaron Batalion</name>
#     <rank type="integer">53</rank>
#     <url-id>aaron-batalion</url-id>
#   </object>
#   <object>
#     <author>Joshua Peek</author>
#     <authored-timestamp type="datetime">2009-09-02T16:44:36Z</authored-timestamp>
#     <branch>origin/master</branch>
#     <committed-timestamp type="datetime">2009-09-02T16:44:36Z</committed-timestamp>
#     <committer>Joshua Peek</committer>
#     <git-show nil="true"></git-show>
#     <id type="integer">190316</id>
#     <imported-from-svn type="boolean">false</imported-from-svn>
#     <message>Kill AMo observing wrap_with_notifications since ARes was only using it</message>
#     <sha1>723a47bfb3708f968821bc969a9a3fc873a3ed58</sha1>
#   </object>
# </objects>
</ruby>

Если получатель является массивом хэшей, корневой узел по умолчанию также "objects":

<ruby>
[{:a => 1, :b => 2}, {:c => 3}].to_xml
# =>
# <?xml version="1.0" encoding="UTF-8"?>
# <objects type="array">
#   <object>
#     <b type="integer">2</b>
#     <a type="integer">1</a>
#   </object>
#   <object>
#     <c type="integer">3</c>
#   </object>
# </objects>
</ruby>

WARNING. Если коллекция пустая, корневой элемент по умолчанию "nil-classes". Пример для понимания, корневой элемент для вышеописанного списка распространителей не будет "contributors", если коллекция пустая, а "nil-classes". Можно использовать опцию +:root+, чтобы обеспечить то, что будет соответствовать корневому элементу.

Имя дочерних узлов по умолчанию является именем корневого узла в единственном числе. В вышеописанных примерах мы видели "contributor" и "object'. Опция +:children+ позволяет установить эти имена узлов.

По умолчанию билдер XML является свежим экземпляром +Builder::XmlMarkup+. Можно сконфигурировать свой собственный билдер через опцию +:builder+. Метод также принимает опции, такие как +:dasherize+ со товарищи, они перенаправляются в билдер:

<ruby>
Contributor.limit(2).order(:rank).to_xml(:skip_types => true)
# =>
# <?xml version="1.0" encoding="UTF-8"?>
# <contributors>
#   <contributor>
#     <id>4356</id>
#     <name>Jeremy Kemper</name>
#     <rank>1</rank>
#     <url-id>jeremy-kemper</url-id>
#   </contributor>
#   <contributor>
#     <id>4404</id>
#     <name>David Heinemeier Hansson</name>
#     <rank>2</rank>
#     <url-id>david-heinemeier-hansson</url-id>
#   </contributor>
# </contributors>
</ruby>

NOTE: Определено в +active_support/core_ext/array/conversions.rb+.

h4. Оборачивание

Метод +Array.wrap+ оборачивает свои аргументы в массив, кроме случая, когда это уже массив (или подобно массиву).

А именно:

* Если аргумент +nil+, возвращается пустой список.
* В противном случае, если аргумент откликается на +to_ary+, он вызывается, и, если значение +to_ary+ не +nil+, оно возвращается.
* В противном случае, возвращается массив с аргументом в качестве его первого элемента.

<ruby>
Array.wrap(nil)       # => []
Array.wrap([1, 2, 3]) # => [1, 2, 3]
Array.wrap(0)         # => [0]
</ruby>

Этот метод похож на +Kernel#Array+, но с некоторыми отличиями:

* Если аргумент откликается на +to_ary+, метод вызывается. +Kernel#Array+ начинает пробовать +to_a+, если вернувшееся значение +nil+, а +Arraw.wrap+ возвращает этот +nil+ в любом случае.
* Если возвращаемое значение от +to_ary+ и не +nil+, и не объект +Array+, +Kernel#Array+ вызывает исключение, в то время как +Array.wrap+ нет, он просто возвращает значение.
* Он не вызывает +to_a+ на аргументе, хотя в особенных случае с +nil+ возвращает пустой массив.

Следующий пункт особенно заметен для некоторых enumerables:

<ruby>
Array.wrap(:foo => :bar) # => [{:foo => :bar}]
Array(:foo => :bar)      # => [[:foo, :bar]]
</ruby>

Также имеется связанная идиома, использующая оператор расплющивания:

<ruby>
[*object]
</ruby>

который в Ruby 1.8 возвращает +[nil]+ для +nil+, а в противном случае вызывает +Array(object)+. (Точное поведение в 1.9 пока непонятно)

Таким образом, в этом случае поведение различается для +nil+, а описанная выше разница с +Kernel#Array+ применима к остальным +object+.

NOTE: Определено в +active_support/core_ext/array/wrap.rb+.

h4. Дублирование

Метод +Array.deep_dup+ дублирует себя и все объекты внутри рекурсивно с помощью метода ActiveSupport +Object#deep_dup+. Он работает так же, как +Array#map+, посылая метод +deep_dup+ в каждый объект внутри.

<ruby>
array = [1, [2, 3]]
dup = array.deep_dup
dup[1][2] = 4
array[1][2] == nil   # => true
</ruby>

NOTE: Определено в +active_support/core_ext/array/deep_dup.rb+.

h4. Группировка

h5. +in_groups_of(number, fill_with = nil)+

Метод +in_groups_of+ разделяет массив на последовательные группы определенного размера. Он возвращает массив с группами:

<ruby>
[1, 2, 3].in_groups_of(2) # => [[1, 2], [3, nil]]
</ruby>

или вкладывает их по очереди в блок, если он задан:

<ruby>
<% sample.in_groups_of(3) do |a, b, c| %>
  <tr>
    <td><%=h a %></td>
    <td><%=h b %></td>
    <td><%=h c %></td>
  </tr>
<% end %>
</ruby>

Первый пример показывает, как +in_groups_of+ заполняет последнюю группу столькими элементами +nil+, сколько нужно, чтобы получить требуемый размер. Можно изменить это набивочное значение используя второй необязательный аргумент:

<ruby>
[1, 2, 3].in_groups_of(2, 0) # => [[1, 2], [3, 0]]
</ruby>

Наконец, можно сказать методу не заполнять последнюю группу, передав +false+:

<ruby>
[1, 2, 3].in_groups_of(2, false) # => [[1, 2], [3]]
</ruby>

Как следствие +false+ не может использоваться как набивочное значение.

NOTE: Определено в +active_support/core_ext/array/grouping.rb+.

h5. +in_groups(number, fill_with = nil)+

Метод +in_groups+ разделяет массив на определенное количество групп. Метод возвращает массив с группами:

<ruby>
%w(1 2 3 4 5 6 7).in_groups(3)
# => [["1", "2", "3"], ["4", "5", nil], ["6", "7", nil]]
</ruby>

или вкладывает их по очереди в блок, если он передан:

<ruby>
%w(1 2 3 4 5 6 7).in_groups(3) {|group| p group}
["1", "2", "3"]
["4", "5", nil]
["6", "7", nil]
</ruby>

Примеры выше показывают, что +in_groups+ заполняет некоторые группы с помощью заключительного элемента +nil+, если необходимо. Группа может получить не более одного из этих дополнительных элементов, если он будет, то будет стоять справа. Группы, получившие его, будут всегда последние.

Можно изменить это набивочное значение, используя второй необязательный аргумент:

<ruby>
%w(1 2 3 4 5 6 7).in_groups(3, "0")
# => [["1", "2", "3"], ["4", "5", "0"], ["6", "7", "0"]]
</ruby>

Также можно сказать методу не заполнять меньшие группы, передав +false+:

<ruby>
%w(1 2 3 4 5 6 7).in_groups(3, false)
# => [["1", "2", "3"], ["4", "5"], ["6", "7"]]
</ruby>

Как следствие +false+ не может быть набивочным значением.

NOTE: Определено в +active_support/core_ext/array/grouping.rb+.

h5. +split(value = nil)+

Метод +split+ разделяет массив разделителем и возвращает получившиеся куски.

Если передан блок, разделителями будут те элементы, для которых блок возвратит true:

<ruby>
(-5..5).to_a.split { |i| i.multiple_of?(4) }
# => [[-5], [-3, -2, -1], [1, 2, 3], [5]]
</ruby>

В противном случае, значение, полученное как аргумент, которое по умолчанию является +nil+, будет разделителем:

<ruby>
[0, 1, -5, 1, 1, "foo", "bar"].split(1)
# => [[0], [-5], [], ["foo", "bar"]]
</ruby>

TIP: Отметьте в предыдущем примере, что последовательные разделители приводят к пустым массивам.

NOTE: Определено в +active_support/core_ext/array/grouping.rb+.
