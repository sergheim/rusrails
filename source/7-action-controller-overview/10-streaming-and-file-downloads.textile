h1. Потоки и загрузка файлов

Иногда хочется послать пользователю файл вместо рендеринга страницы HTML. Все контроллеры в Rails имеют методы +send_data+ и +send_file+, которые направляют данные на клиента. +send_file+ - это удобный метод, который позволяет указать имя файла на диске, а он направит содержимое этого файла вам.

Чтобы направить данные на клиента, используйте +send_data+:

<ruby>
require "prawn"
class ClientsController < ApplicationController
  # Создает документ PDF с информацией на клиента и возвращает
  # его. Пользователь получает PDF как загрузку файла.
  def download_pdf
    client = Client.find(params[:id])
    send_data generate_pdf(client),
              filename: "#{client.name}.pdf",
              type: "application/pdf"
  end

  private

  def generate_pdf(client)
    Prawn::Document.new do
      text client.name, align: :center
      text "Address: #{client.address}"
      text "Email: #{client.email}"
    end.render
  end
end
</ruby>

Экшн +download_pdf+ в примере вызовет private метод, который фактически создаст документ PDF и возвратит его как строку. Эта строка будет направлена клиенту как загрузка файла, и пользователю будет предложено имя файла. Иногда при передаче файлов пользователю, вы можете не захотеть, чтобы их скачивали. Принятие изображений, к примеру, которое может быть внедрено в страницы HTML. Чтобы сказать браузеру, что файл не подразумевает быть скачанным, нужно установить опцию +:disposition+ как "inline". Противоположное и дефолтное значение этой опции - +"attachment+.

h4. Отправка файлов

Если хотите отправить файл, уже существующий на диске, используйте метод +send_file+.

<ruby>
class ClientsController < ApplicationController
  # Передача файла, который уже был создан и сохранен на диск.
  def download_pdf
    client = Client.find(params[:id])
    send_file("#{Rails.root}/files/clients/#{client.id}.pdf",
              filename: "#{client.name}.pdf",
              type: "application/pdf")
  end
end
</ruby>

Это прочтет и передаст файл блоками в 4kB за раз, что избегает загрузки целого файла в память единовременно. Можете отключить потоковость с помощью опции +:stream+ или отрегулировать размер блока с помощью опции +:buffer_size+.

Если не указан +:type+, он будет угадан по расширению файла, указанного в +:filename+. Если для расширения не зарегистрирован тип содержимого, будет использован <tt>application/octet-stream</tt>.

WARNING: Будьте осторожны, когда используете данные, пришедшие с клиента (params, куки и т.д.), для обнаружения файла на диске, так как есть риск безопасности в том, что кто-то может получить доступ к файлам, которые они не должны видеть.

TIP: Не рекомендуется передавать статичные файлы через Rails, если можно вместо этого разместить их в папке public на Вашем вебсервере. Более эффективно разрешить пользователям скачивать файлы напрямую, используя Apache или другой вебсервер, сохраняя запрос от ненужного прогона через весь стек Rails.

h4. Загрузка RESTful

Хотя +send_data+ работает прекрасно, если вы создаете приложение на принципах RESTful, наличие отдельных экшнов для загрузок файла обычно не рекомендовано. В терминологии REST, файл PDF из примера выше можно считать еще одним представлением ресурса client. Rails предоставляет простой и наглядный способ осуществления загрузок в стиле RESTful. Вот как можно переписать пример так, что загрузка PDF является частью экшна +show+, без какой-либо потоковости:

<ruby>
class ClientsController < ApplicationController
  # Пользователь может запросить получение этого ресурса как HTML или PDF.
  def show
    @client = Client.find(params[:id])

    respond_to do |format|
      format.html
      format.pdf { render pdf: generate_pdf(@client) }
    end
  end
end
</ruby>

Для того, чтобы этот пример заработал, нужно добавить PDF тип MIME в Rails. Это выполняется добавлением следующей строки в файл +config/initializers/mime_types.rb+:

<ruby>
Mime::Type.register "application/pdf", :pdf
</ruby>

NOTE: Конфигурационные файлы не перезагружаются с каждым запросом, поэтому необходимо перезапустить сервер для того, чтобы изменения вступили в силу.

Тепрь пользователь может запрашивать получение версии в PDF, просто добавив ".pdf" в URL:

<shell>
GET /clients/1.pdf
</shell>
