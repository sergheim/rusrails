h1. Обработка ошибок

Скорее всего, ваше приложение будет содержать ошибки или, другими словами, вызывать исключения, которые нужно обработать. Например, если пользователь проходит по ссылке на ресурс, который больше не существует в базе данных, Active Record вызовет исключение +ActiveRecord::RecordNotFound+.

Дефолтный обработчик исключений Rails отображает сообщение "500 Server Error" для всех исключений. Если запрос сделан локально, отображается прекрасная трассировка и некоторая дополнительная информация, так что вы можете выяснить, что пошло не так, и разобраться с этим. Если запрос был удаленным, Rails отобразит пользователю лишь простое сообщение "500 Server Error", или "404 Not Found", если была проблема с роутингом или запись не была найдена. Иногда вы захотите настроить, как эти ошибки будут перехвачены, и как они будут отображены пользователю. В приложении на Rails доступны несколько уровней обработки исключений:

h4. Дефолтные шаблоны 500 и 404

По умолчанию приложение в среде production будет рендерить или 404, или 500 сообщение об ошибке. Эти сообщения содержатся в статичных файлах HTML в папке +public+, в +404.html+ и +500.html+ соответственно. Можете настроить эти файлы, добавив дополнительную информацию и разметку, но помните, что они статичны; т.е. нельзя использовать +RHTML+ или макеты в них, только чистый +HTML+.

h4. +rescue_from+

Если хотите сделать нечто более сложное при перехвате ошибок, можете использовать +rescue_from+, которая управляет исключениями определенного типа (или нескольких типов) во всем контроллере и его субклассах.

Когда происходит исключение, которое перехватывается директивой +rescue_from+, сбойный объект передается в обработчик. Обработчик может быть методом или объектом +Proc+, переданным опции +:with+. Также можно использовать блок вместо объекта +Proc+.

Вот как можно использовать +rescue_from+ для перехвата всех ошибок +ActiveRecord::RecordNotFound+ и что-то с ними делать.

<ruby>
class ApplicationController < ActionController::Base
  rescue_from ActiveRecord::RecordNotFound, with: :record_not_found

  private

  def record_not_found
    render text: "404 Not Found", status: 404
  end
end
</ruby>

Конечно, этот пример далеко не доработан, и ничуть не улучшает обработку исключений по умолчанию, но раз вы уже перехватили все эти исключения, то вольны делать с ними все, что хотите. Например, можете создать свои классы исключений, которые будут вызваны, когда у пользователя нет доступа в определенные разделы вашего приложения:

<ruby>
class ApplicationController < ActionController::Base
  rescue_from User::NotAuthorized, with: :user_not_authorized

  private

  def user_not_authorized
    flash[:error] = "You don't have access to this section."
    redirect_to :back
  end
end

class ClientsController < ApplicationController
  # Проверим, что пользователь имеет права доступа к клиентам.
  before_filter :check_authorization

  # Отметим как экшны не беспокоятся об авторизационных делах.
  def edit
    @client = Client.find(params[:id])
  end

  private

  # Если пользователь не авторизован, просто вызываем исключение.
  def check_authorization
    raise User::NotAuthorized unless current_user.admin?
  end
end
</ruby>

NOTE: Некоторые исключения перехватываемы только из класса +ApplicationController+, так как они вызываются до того, как контроллер будет инициализирован, и экшны будут выполнены. Смотрите "статью Pratik Naik":http://m.onkey.org/2008/7/20/rescue-from-dispatching по этой теме.
