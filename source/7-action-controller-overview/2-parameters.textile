h1. Параметры

Возможно, вы хотите получить доступ к данным, посланным пользователем, или к другим параметрам в экшнах вашего контроллера. Имеются два типа параметров, возможных в веб приложениях. Первый - это параметры, посланные как часть URL, называемые параметрами строки запроса. Строка запроса всегда следует после "?" в URL. Второй тип параметров обычно упоминаются как данные POST. Эта информация обычно приходит из формы HTML, заполняемой пользователем. Они называются данными POST, так как могут быть посланы только как часть HTTP запроса POST. Rails не делает каких-либо различий между строковыми параметрами и параметрами POST, и они оба доступны в хэше +params+ в вашем контроллере:

<ruby>
class ClientsController < ActionController::Base
  # Этот экшн использует параметры строки запроса, потому, что он
  # запускается HTTP запросом GET, но это не делает каких-либо
  # различий в способе, с помощью которого можно получить доступ к
  # ним. URL для этого экшна выглядит как этот, запрашивающий список
  # активированных клиентов: /clients?status=activated
  def index
    if params[:status] == "activated"
      @clients = Client.activated
    else
      @clients = Client.unactivated
    end
  end

  # Этот экшн использует параметры POST. Они, скорее всего, пришли от
  # формы HTML, которую подтвердил пользователь. URL для этого
  # RESTful запроса будет /clients, и данные будут посланы
  # как часть тела запроса.
  def create
    @client = Client.new(params[:client])
    if @client.save
      redirect_to @client
    else
      # Эта строчка переопределяет поведение рендеринга по умолчанию, который
      # отрендерил бы вьюху "create".
      render action: "new"
    end
  end
end
</ruby>

h4. Параметры в хэше и в массиве

Хэш +params+ не ограничен одномерными ключами и значениями. Он может содержать массивы и (вложенные) хэши. Чтобы послать массив значений, добавьте пустую пару квадратных скобок "[]" к имени ключа:

<pre>
GET /clients?ids[]=1&ids[]=2&ids[]=3
</pre>

NOTE: Фактический URL в этом примере будет перекодирован как "/clients?ids%5b%5d=1&amp;ids%5b%5d=2&amp;ids%5b%5b=3", так как "[" и "]" не допустимы в URL. В основном, вам не придется беспокоиться об этом, так как браузер позаботится об этом за вас, а Rails декодирует это обратно, когда получит, но если вы когда-нибудь будете отправлять эти запросы вручную, имейте это в виду.

Значение +params[:ids]+ теперь будет +["1", "2", "3"]+. Отметьте, что значения параметра всегда строчное; Rails не делает попыток угадать или предсказать тип.

Чтобы послать хэш, следует заключить имя ключа в скобки:

<html>
<form accept-charset="UTF-8" action="/clients" method="post">
  <input type="text" name="client[name]" value="Acme" />
  <input type="text" name="client[phone]" value="12345" />
  <input type="text" name="client[address][postcode]" value="12345" />
  <input type="text" name="client[address][city]" value="Carrot City" />
</form>
</html>

Когда эта форма будет подтверждена, значение +params[:client]+ будет:

<ruby>
{ name: "Acme", phone: "12345", address: { postcode: "12345", city: "Carrot City" } }
</ruby>

Обратите внимание на вложенный хэш в +params[:client][:address]+.

Отметьте, что хэш +params+ фактически является экземпляром +HashWithIndifferentAccess+ от Active Support, который ведет себя как хэш, который позволяет взаимозаменяемо использовать символы и строки как ключи.

h4. Параметры JSON/XML

Если вы пишете приложение веб-сервиса, возможно вам более комфортно принимать параметры в формате JSON или XML. Rails автоматически преобразует ваши параметры в хэш +params+, к которому можно получить доступ так же, как и к обычным данным формы.

Так, к примеру, если вы пошлете этот параметр JSON:

<pre>
{ "company": { "name": "acme", "address": "123 Carrot Street" } }
</pre>

То получите +params[:company]+ как <tt>{ name: "acme", address: "123 Carrot Street" }</tt>.

Также, если включите +config.wrap_parameters+ в своем инициализаторе или вызовете +wrap_parameters+ в своем контроллере, можно безопасно опустить корневой элемент в параметре JSON/XML. Параметры будут клонированы и обернуты в ключ, соответствующий по умолчанию имени вашего контроллера. Таким образом, вышеупомянутый параметр может быть записан как:

<pre>
{ "name": "acme", "address": "123 Carrot Street" }
</pre>

И предположим, что мы посылаем данные в +CompaniesController+, тогда он будет обернут в ключ +:company+ следующим образом:

<ruby>
{ name: "acme", address: "123 Carrot Street", company: { name: "acme", address: "123 Carrot Street" } }
</ruby>

После обращения к "документации API":http://api.rubyonrails.org/classes/ActionController/ParamsWrapper.html: вы сможете настроить имя ключа или определенные параметры, которые вы хотите обернуть.

h4. Параметры роутинга

Хэш +params+ будет всегда содержать ключи +:controller+ и +:action+, но следует использовать методы +controller_name+ и +action_name+ вместо них для доступа к этим значениям. Любой другой параметр, определенный роутингом, такой как +:id+, также будет доступен. Как пример рассмотрим перечень клиентов, где список может быть показан либо для активных, либо для неактивных клиентов. Мы можем добавить маршрут, который перехватывает параметр +:status+ в "красивом" URL:

<ruby>
match '/clients/:status' => 'clients#index', foo: 'bar'
</ruby>

В этом случае, когда пользователь откроет URL +/clients/active+, +params[:status]+ будет установлен в "active". Когда использован этот маршрут, +params[:foo]+ также будет установлен в "bar", как будто он был передан в строке запроса. Аналогично +params[:action]+ будет содержать "index".

h4. +default_url_options+

Можно установить глобальные параметры по умолчанию для создания URL, определив в контроллере метод по имени +default_url_options+. Этот метод должен возвращать хэш с желаемыми значениями по умолчанию, ключи которого должны быть символами:

<ruby>
class ApplicationController < ActionController::Base
  def default_url_options
    { locale: I18n.locale }
  end
end
</ruby>

Эти опции будут использованы как начальная точка при генерации URL, поэтому, они могут быть переопределены опциями, переданными в +url_for+.

Если определить +default_url_options+ в +ApplicationController+, как это показано в примере, они будут использованы для создания всех URL. Метод также может быть определен в одном отдельном контроллере, в этом случае он только влияет на URL, создаваемые в нем.
