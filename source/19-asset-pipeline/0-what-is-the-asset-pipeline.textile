h1. Что такое файлопровод (Asset Pipeline)?

Файлопровод представляет фреймворк для соединения и минимизации или сжатия ресурсов JavaScript и CSS. Он также добавляет возможность писать эти ресурсы на других языках, таких как CoffeeScript, Sass и ERB.

До Rails 3.1 эти особенности добавлялись сторонними библиотеками Ruby, такимим как Jammit и Sprockets. Rails 3.1 интегрирован по умолчанию со Sprockets с помощью Action Pack, который имеет зависимость от гема +sprockets+.

Становление файлопровода как ключевой особенности Rails означает, что все разработчики могут воспользоваться мощью того, что их ресурсы будут предварительно обработаны, сжаты и минифицированы с помощью единой библиотеки, Sprockets. Это часть стратегии "fast by default", как было сказано David Heinemeier Hansson на открытии RailsConf 2011.

Файлопровод по умолчанию в Rails 3.1 включен. Он может быть отключен в +config/application.rb+, если поместить следующую строку в определении класса приложения:

<ruby>
config.assets.enabled = false
</ruby>

Также файлопровод можно отключить при создании нового приложения, передав опцию <tt>--skip-sprockets</tt>.

<plain>
rails new appname --skip-sprockets
</plain>

Следует использовать значeния по умолчанию для всех новых приложений, если у вас нет особых причин избегать файлопровода.

h4. Основные особенности

Первой особенностью файлопровода является соединение ресурсов. Это важно в среде production, поскольку может уменьшить количество запросов, необходимых браузеру для отображения страницы. Браузеры ограничены в количестве запросов, которые они могут выполнить параллельно, поэтому меньше запросов может означать быстрейшую загрузку вашего приложения.

Rails 2.x представил способность соединять ресурсы JavaScript и CSS, при помещении +:cache => true+ в конце методов +javascript_include_tag+ и +stylesheet_link_tag+. Но эта техника имела серию ограничений. К примеру, нельзя было создать кэш заранее, нельзя было явно включить ресурсы, предоставленные сторонними библиотеками.

Начиная с версии 3.1, по умолчанию Rails соединеняет все JavaScript файлы в один главный файл +.js+ и все CSS файлы в один главный файл +.css+. Как будет сказано далее в этому руководстве, можно настроить эту стратегию, сгруппировав файлы любым способом. В production, Rails вставляет метку MD5 в каждое имя файла, таким образом файл кэшируется браузером. Кэш можно сделать недействительным, изменив эту метку, что происходит автоматически каждый раз, когда изменяется содержимое файла..

Второй особенностью файлопровода является минимизация или сжатие ресурсов. Для файлов CSS это выполняется путем удаления пробелов и комментариев. Для JavaScript могут быть применены более сложные процессы. Можно выбирать из набора встроенных опций или опеределить свои.

Третьей особенностью файлопровода является то, что он позволяет писать эти ресурсы на языке высшего уровня с дальнейшей прекомпиляцией до фактического ресурса. Поддерживаемые языки по умолчанию включают Sass для CSS, CoffeeScript для JavaScript и ERB для обоих.

h4. Что за метки и зачем они нужны?

Метки -- это техника, осуществляющая зависимость имени файла от его содержимого. При изменении содержимого файла, имя файла также изменяется. Для статичного или нечасто обновляемого содержимого это предоставляет легкий способ сказать, что две версии файла идентичны, даже если они на разных серверах, или имеют различную дату размещения.

Когда имя файла уникально и основано на его содержимом, заголовками HTTP можно установить повсеместное кэширование (в CDN, у провайдера, в сетевом оборудовани или браузере), чтобы у них была собственная копия содержимого. Когда содержимое изменяется, метка тоже изменится. Это приведет к тому, что удаленные клиенты затребуют новую копию содержимого. Эта техника известна как _cache busting_.

Техникой, используемой Rails для меток, является вставка хеша содержимого в имя, обычно в конце. Например, файл CSS +global.css+ может быть переименован с помощью дайджеста MD5 его содержимого:

<plain>
global-908e25f4bf641868d8683022a5b62f54.css
</plain>

Это стратегия, принятая файлопроводом Rails.

Прежней стратегией Rails было добавление основанной на дате строки запроса к каждому ресурсу, присоединенному с помощью встроенного хелпера. В исходнике созданый код выглядел так:

<plain>
/stylesheets/global.css?1309495796
</plain>

У стратегии, основанной на строке запроса, имелось несколько недостатков:

<ol>
  <li>
    <strong>Не все кэши надежно кэшировали содержимое, когда имя файла отличалось только параметрами строки запроса</strong>.<br />
    "Steve Souders рекомендует":http://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/, "...избегать строки запросов для кэшируемых ресурсов". Он обнаружил, что в этом случае 5-20% запросов не будут закэшированы. В частности, строки запроса совсем не работают с некоторыми сетями доставки контента (CDN) для инвалидации кэша.
  </li>
  <li>
    <strong>Имя файла может быть разным на разных узлах в мультисерверных окружениях.</strong><br />
    По умолчанию, строка запроса в Rails 2.x основывается на времени изменения файлов. Когда ресурсы размещаются в кластер, нет никакой гарантии, что временная метка будет одной и той же, в результате будут использованы различные значения в зависимости от того, какой сервер будет обрабатывать запрос.
  </li>
  <li>
    <strong>Слишком много прекращенного кэша</strong><br />
    При размещении статичных ресурсов с каждым новым релизом кода, mtime _всех_ этих файлов изменялось, принуждая всех удаленных клиентов получать их снова, даже если содержимое этих ресурсов не менялось.
  </li>
</ol>

Метки исправляют эти проблемы с помощью избегания строк запроса и обеспечения, что имя файла основывается на его содержимом.

По умолчанию метки включены для production и отключены для всех других сред. Их можно включить или отключить в конфигурации с помощью опции +config.assets.digest+.

Более подробно:

* "Optimize caching":http://code.google.com/speed/page-speed/docs/caching.html
* "Revving Filenames: don’t use querystring":http://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/
